; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\clk.o --depend=.\obj\clk.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC472_442\Include -I..\..\..\..\Library\StdDriver\inc -IE:\Keil\ARM\INC -IE:\Keil\ARM\INC\ARM --omf_browse=.\obj\clk.crf ..\..\..\..\Library\StdDriver\src\clk.c]
                          THUMB

                          AREA ||i.CLK_DisableCKO||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;31       */	
;;;32     void CLK_DisableCKO(void)
000000  4804              LDR      r0,|L1.20|
;;;33     {
;;;34         /* Disable CKO clock source */
;;;35         CLK->APBCLK0 &= (~CLK_APBCLK0_CLKOCKEN_Pos);
000002  6800              LDR      r0,[r0,#0]
000004  f0200006          BIC      r0,r0,#6
000008  f04f4180          MOV      r1,#0x40000000
00000c  f8c10208          STR      r0,[r1,#0x208]
;;;36     }
000010  4770              BX       lr
;;;37     
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40000208

                          AREA ||i.CLK_DisableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_DisableModuleClock PROC
;;;620      */
;;;621    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  4908              LDR      r1,|L2.36|
;;;622    {
;;;623        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_AHPBCLK(u32ModuleIdx)*4))  &= ~(1<<MODULE_IP_EN_Pos(u32ModuleIdx));
000002  2203              MOVS     r2,#3
000004  ea027290          AND      r2,r2,r0,LSR #30
000008  f8511022          LDR      r1,[r1,r2,LSL #2]
00000c  f000031f          AND      r3,r0,#0x1f
000010  2201              MOVS     r2,#1
000012  409a              LSLS     r2,r2,r3
000014  4391              BICS     r1,r1,r2
000016  4a03              LDR      r2,|L2.36|
000018  2303              MOVS     r3,#3
00001a  ea037390          AND      r3,r3,r0,LSR #30
00001e  f8421023          STR      r1,[r2,r3,LSL #2]
;;;624    }
000022  4770              BX       lr
;;;625    
                          ENDP

                  |L2.36|
                          DCD      0x40000204

                          AREA ||i.CLK_DisablePLL||, CODE, READONLY, ALIGN=2

                  CLK_DisablePLL PROC
;;;670      */
;;;671    void CLK_DisablePLL(void)
000000  4804              LDR      r0,|L3.20|
;;;672    {
;;;673        CLK->PLLCTL &= ~CLK_PLLCTL_PD_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  f4203080          BIC      r0,r0,#0x10000
000008  f04f4180          MOV      r1,#0x40000000
00000c  f8c10240          STR      r0,[r1,#0x240]
;;;674    }
000010  4770              BX       lr
;;;675    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40000240

                          AREA ||i.CLK_DisableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_DisableXtalRC PROC
;;;474      */
;;;475    void CLK_DisableXtalRC(uint32_t u32ClkMask)
000000  4904              LDR      r1,|L4.20|
;;;476    {
;;;477        CLK->PWRCTL &= ~u32ClkMask;
000002  6809              LDR      r1,[r1,#0]
000004  ea210100          BIC      r1,r1,r0
000008  f04f4280          MOV      r2,#0x40000000
00000c  f8c21200          STR      r1,[r2,#0x200]
;;;478    }
000010  4770              BX       lr
;;;479    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40000200

                          AREA ||i.CLK_EnableCKO||, CODE, READONLY, ALIGN=2

                  CLK_EnableCKO PROC
;;;55       */
;;;56     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;59         CLK->CLKOCTL = CLK_CLKOCTL_CLKOEN_Msk | u32ClkDiv | u32ClkDivBy1En<<CLK_CLKOCTL_DIV1EN_Pos;
000002  f0410310          ORR      r3,r1,#0x10
000006  ea431342          ORR      r3,r3,r2,LSL #5
00000a  4c0a              LDR      r4,|L5.52|
00000c  6023              STR      r3,[r4,#0]
;;;60     
;;;61         /* Enable CKO clock source */
;;;62         CLK->APBCLK0 |= CLK_APBCLK0_CLKOCKEN_Msk;
00000e  f04f4380          MOV      r3,#0x40000000
000012  f8d33208          LDR      r3,[r3,#0x208]
000016  f0430340          ORR      r3,r3,#0x40
00001a  f04f4480          MOV      r4,#0x40000000
00001e  f8c43208          STR      r3,[r4,#0x208]
;;;63     
;;;64         /* Select CKO clock source */
;;;65         CLK->CLKSEL1 = (CLK->CLKSEL1 & (~CLK_CLKSEL1_CLKOSEL_Msk)) | u32ClkSrc;
000022  4b05              LDR      r3,|L5.56|
000024  681b              LDR      r3,[r3,#0]
000026  f0235340          BIC      r3,r3,#0x30000000
00002a  ea430300          ORR      r3,r3,r0
00002e  4c02              LDR      r4,|L5.56|
000030  6023              STR      r3,[r4,#0]
;;;66     }
000032  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  |L5.52|
                          DCD      0x40000260
                  |L5.56|
                          DCD      0x40000214

                          AREA ||i.CLK_EnableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_EnableModuleClock PROC
;;;547      */
;;;548    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000000  4908              LDR      r1,|L6.36|
;;;549    {
;;;550        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK+(MODULE_AHPBCLK(u32ModuleIdx)*4))  |= 1<<MODULE_IP_EN_Pos(u32ModuleIdx);
000002  2203              MOVS     r2,#3
000004  ea027290          AND      r2,r2,r0,LSR #30
000008  f8511022          LDR      r1,[r1,r2,LSL #2]
00000c  f000031f          AND      r3,r0,#0x1f
000010  2201              MOVS     r2,#1
000012  409a              LSLS     r2,r2,r3
000014  4311              ORRS     r1,r1,r2
000016  4a03              LDR      r2,|L6.36|
000018  2303              MOVS     r3,#3
00001a  ea037390          AND      r3,r3,r0,LSR #30
00001e  f8421023          STR      r1,[r2,r3,LSL #2]
;;;551    }
000022  4770              BX       lr
;;;552    
                          ENDP

                  |L6.36|
                          DCD      0x40000204

                          AREA ||i.CLK_EnablePLL||, CODE, READONLY, ALIGN=2

                  CLK_EnablePLL PROC
;;;633      */
;;;634    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;635    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;636        uint32_t u32Register,u32ClkSrc,u32NF,u32NR;
;;;637    
;;;638        if(u32PllClkSrc==CLK_PLLCTL_PLLSRC_HIRC) {
000008  f5b92f00          CMP      r9,#0x80000
00000c  d10e              BNE      |L7.44|
;;;639            CLK->PLLCTL = (CLK->PLLCTL & ~CLK_PLLCTL_PD_Msk) | (CLK_PLLCTL_PLLSRC_HIRC);
00000e  4820              LDR      r0,|L7.144|
000010  6800              LDR      r0,[r0,#0]
000012  f4203080          BIC      r0,r0,#0x10000
000016  f4402000          ORR      r0,r0,#0x80000
00001a  f04f4180          MOV      r1,#0x40000000
00001e  f8c10240          STR      r0,[r1,#0x240]
;;;640            u32Register = 1<<CLK_PLLCTL_PLLSRC_Pos;
000022  f44f2500          MOV      r5,#0x80000
;;;641            u32ClkSrc = __HIRC;
000026  f8df806c          LDR      r8,|L7.148|
00002a  e00b              B        |L7.68|
                  |L7.44|
;;;642        } else {
;;;643            CLK->PLLCTL = (CLK->PLLCTL & ~CLK_PLLCTL_PD_Msk);
00002c  4818              LDR      r0,|L7.144|
00002e  6800              LDR      r0,[r0,#0]
000030  f4203080          BIC      r0,r0,#0x10000
000034  f04f4180          MOV      r1,#0x40000000
000038  f8c10240          STR      r0,[r1,#0x240]
;;;644            u32Register = 0<<CLK_PLLCTL_PLLSRC_Pos;
00003c  f04f0500          MOV      r5,#0
;;;645            u32ClkSrc = __HXT;
000040  f8df8054          LDR      r8,|L7.152|
                  |L7.68|
;;;646        }
;;;647    
;;;648        if(u32PllFreq<FREQ_50MHZ) {
000044  4815              LDR      r0,|L7.156|
000046  4284              CMP      r4,r0
000048  d203              BCS      |L7.82|
;;;649            u32PllFreq <<=2;
00004a  00a4              LSLS     r4,r4,#2
;;;650            u32Register |= (0x3<<CLK_PLLCTL_OUTDV_Pos);
00004c  f4454540          ORR      r5,r5,#0xc000
000050  e002              B        |L7.88|
                  |L7.82|
;;;651        } else {
;;;652            u32PllFreq <<=1;
000052  0064              LSLS     r4,r4,#1
;;;653            u32Register |= (0x1<<CLK_PLLCTL_OUTDV_Pos);
000054  f4454580          ORR      r5,r5,#0x4000
                  |L7.88|
;;;654        }
;;;655        u32NF = u32PllFreq / 1000000;
000058  4811              LDR      r0,|L7.160|
00005a  fbb4f6f0          UDIV     r6,r4,r0
;;;656        u32NR = u32ClkSrc / 1000000;
00005e  fbb8f7f0          UDIV     r7,r8,r0
;;;657        while( u32NR>(0xF+2) || u32NF>(0xFF+2) ) {
000062  e001              B        |L7.104|
                  |L7.100|
;;;658            u32NR = u32NR>>1;
000064  087f              LSRS     r7,r7,#1
;;;659            u32NF = u32NF>>1;
000066  0876              LSRS     r6,r6,#1
                  |L7.104|
000068  2f11              CMP      r7,#0x11              ;657
00006a  d8fb              BHI      |L7.100|
00006c  f5b67f81          CMP      r6,#0x102             ;657
000070  d2f8              BCS      |L7.100|
;;;660        }
;;;661        CLK->PLLCTL = u32Register | ((u32NR - 2)<<9) | (u32NF - 2) ;
000072  1eb8              SUBS     r0,r7,#2
000074  ea452040          ORR      r0,r5,r0,LSL #9
000078  1eb1              SUBS     r1,r6,#2
00007a  4308              ORRS     r0,r0,r1
00007c  4904              LDR      r1,|L7.144|
00007e  6008              STR      r0,[r1,#0]
;;;662        CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
000080  f04f0004          MOV      r0,#4
000084  f7fffffe          BL       CLK_WaitClockReady
;;;663    
;;;664        return CLK_GetPLLClockFreq();
000088  f7fffffe          BL       CLK_GetPLLClockFreq
;;;665    }
00008c  e8bd83f0          POP      {r4-r9,pc}
;;;666    
                          ENDP

                  |L7.144|
                          DCD      0x40000240
                  |L7.148|
                          DCD      0x01518000
                  |L7.152|
                          DCD      0x00b71b00
                  |L7.156|
                          DCD      0x02faf080
                  |L7.160|
                          DCD      0x000f4240

                          AREA ||i.CLK_EnableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_EnableXtalRC PROC
;;;460      */
;;;461    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000000  4904              LDR      r1,|L8.20|
;;;462    {
;;;463        CLK->PWRCTL |= u32ClkMask;
000002  6809              LDR      r1,[r1,#0]
000004  ea410100          ORR      r1,r1,r0
000008  f04f4280          MOV      r2,#0x40000000
00000c  f8c21200          STR      r1,[r2,#0x200]
;;;464    }
000010  4770              BX       lr
;;;465    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40000200

                          AREA ||i.CLK_GetCPUFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetCPUFreq PROC
;;;147      */
;;;148    uint32_t CLK_GetCPUFreq(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;151        return SystemCoreClock;
000006  4801              LDR      r0,|L9.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;152    }
00000a  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L9.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHCLKFreq PROC
;;;136      */
;;;137    uint32_t CLK_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;140        return SystemCoreClock;
000006  4801              LDR      r0,|L10.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;141    }
00000a  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L10.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHXTFreq PROC
;;;109      */
;;;110    uint32_t CLK_GetHXTFreq(void)
000000  4804              LDR      r0,|L11.20|
;;;111    {
;;;112        if(CLK->PWRCTL & CLK_PWRCTL_HXTEN_Msk )
000002  6800              LDR      r0,[r0,#0]
000004  f0100f01          TST      r0,#1
000008  d001              BEQ      |L11.14|
;;;113            return __HXT;
00000a  4803              LDR      r0,|L11.24|
                  |L11.12|
;;;114        else
;;;115            return 0;
;;;116    }
00000c  4770              BX       lr
                  |L11.14|
00000e  2000              MOVS     r0,#0                 ;115
000010  e7fc              B        |L11.12|
;;;117    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40000200
                  |L11.24|
                          DCD      0x00b71b00

                          AREA ||i.CLK_GetLXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetLXTFreq PROC
;;;122      */
;;;123    uint32_t CLK_GetLXTFreq(void)
000000  4804              LDR      r0,|L12.20|
;;;124    {
;;;125        if(CLK->PWRCTL & CLK_PWRCTL_LXTEN_Msk )
000002  6800              LDR      r0,[r0,#0]
000004  f0100f02          TST      r0,#2
000008  d002              BEQ      |L12.16|
;;;126            return __LXT;
00000a  f44f4000          MOV      r0,#0x8000
                  |L12.14|
;;;127        else
;;;128            return 0;
;;;129    }
00000e  4770              BX       lr
                  |L12.16|
000010  2000              MOVS     r0,#0                 ;128
000012  e7fc              B        |L12.14|
;;;130    
                          ENDP

                  |L12.20|
                          DCD      0x40000200

                          AREA ||i.CLK_GetPCLKFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLKFreq PROC
;;;95       */
;;;96     uint32_t CLK_GetPCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98         SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;99         if(CLK->CLKSEL0 & CLK_CLKSEL0_PCLKSEL_Msk)
000006  4806              LDR      r0,|L13.32|
000008  6800              LDR      r0,[r0,#0]
00000a  f0100f40          TST      r0,#0x40
00000e  d003              BEQ      |L13.24|
;;;100            return SystemCoreClock/2;
000010  4804              LDR      r0,|L13.36|
000012  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000014  0840              LSRS     r0,r0,#1
                  |L13.22|
;;;101        else
;;;102            return SystemCoreClock;
;;;103    }
000016  bd10              POP      {r4,pc}
                  |L13.24|
000018  4802              LDR      r0,|L13.36|
00001a  6800              LDR      r0,[r0,#0]            ;102  ; SystemCoreClock
00001c  e7fb              B        |L13.22|
;;;104    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      0x40000210
                  |L13.36|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;157      */
;;;158    uint32_t CLK_GetPLLClockFreq(void)
000000  b530              PUSH     {r4,r5,lr}
;;;159    {
;;;160        uint32_t u32Freq =0, u32PLLSrc;
000002  2500              MOVS     r5,#0
;;;161        uint32_t u32NO,u32NF,u32NR,u32PllReg;
;;;162    
;;;163        u32PllReg = CLK->PLLCTL;
000004  4816              LDR      r0,|L14.96|
000006  6801              LDR      r1,[r0,#0]
;;;164    
;;;165        if((u32PllReg & CLK_PLLCTL_PLLREMAP_Msk))
000008  f4111f80          TST      r1,#0x100000
00000c  d001              BEQ      |L14.18|
;;;166            return 0;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;167    
;;;168        if(u32PllReg & CLK_PLLCTL_PLLSRC_Msk)
;;;169            u32PLLSrc = __HIRC;
;;;170        else
;;;171            u32PLLSrc = __HXT;
;;;172    
;;;173        u32NO=(u32PllReg & CLK_PLLCTL_OUTDV_Msk)>>CLK_PLLCTL_OUTDV_Pos;
;;;174        switch(u32NO) {
;;;175        case 0:
;;;176            u32NO=1;
;;;177            break;
;;;178        case 1:
;;;179        case 2:
;;;180            u32NO=2;
;;;181            break;
;;;182        case 3:
;;;183            u32NO=4;
;;;184            break;
;;;185        }
;;;186    
;;;187        u32NF = (u32PllReg & CLK_PLLCTL_FBDIV_Msk) + 2;
;;;188        u32NR = ( (u32PllReg & CLK_PLLCTL_INDIV_Msk)>>CLK_PLLCTL_INDIV_Pos ) + 2;
;;;189    
;;;190        u32Freq = u32PLLSrc * u32NF / u32NR / u32NO ;
;;;191    
;;;192        return u32Freq;
;;;193    }
000010  bd30              POP      {r4,r5,pc}
                  |L14.18|
000012  f4112f00          TST      r1,#0x80000           ;168
000016  d001              BEQ      |L14.28|
000018  4a12              LDR      r2,|L14.100|
00001a  e000              B        |L14.30|
                  |L14.28|
00001c  4a12              LDR      r2,|L14.104|
                  |L14.30|
00001e  f3c13381          UBFX     r3,r1,#14,#2          ;173
000022  b133              CBZ      r3,|L14.50|
000024  2b01              CMP      r3,#1                 ;174
000026  d006              BEQ      |L14.54|
000028  2b02              CMP      r3,#2                 ;174
00002a  d005              BEQ      |L14.56|
00002c  2b03              CMP      r3,#3                 ;174
00002e  d107              BNE      |L14.64|
000030  e004              B        |L14.60|
                  |L14.50|
000032  2301              MOVS     r3,#1                 ;176
000034  e004              B        |L14.64|
                  |L14.54|
000036  bf00              NOP                            ;179
                  |L14.56|
000038  2302              MOVS     r3,#2                 ;180
00003a  e001              B        |L14.64|
                  |L14.60|
00003c  2304              MOVS     r3,#4                 ;183
00003e  bf00              NOP                            ;184
                  |L14.64|
000040  bf00              NOP                            ;177
000042  f3c10008          UBFX     r0,r1,#0,#9           ;187
000046  1c84              ADDS     r4,r0,#2              ;187
000048  f3c12044          UBFX     r0,r1,#9,#5           ;188
00004c  f1000c02          ADD      r12,r0,#2             ;188
000050  fb02f004          MUL      r0,r2,r4              ;190
000054  fbb0f0fc          UDIV     r0,r0,r12             ;190
000058  fbb0f5f3          UDIV     r5,r0,r3              ;190
00005c  4628              MOV      r0,r5                 ;192
00005e  e7d7              B        |L14.16|
;;;194    
                          ENDP

                  |L14.96|
                          DCD      0x40000240
                  |L14.100|
                          DCD      0x01518000
                  |L14.104|
                          DCD      0x00b71b00

                          AREA ||i.CLK_Idle||, CODE, READONLY, ALIGN=2

                  CLK_Idle PROC
;;;84       */
;;;85     void CLK_Idle(void)
000000  4804              LDR      r0,|L15.20|
;;;86     {
;;;87         CLK->PWRCTL |= (CLK_PWRCTL_PDEN_Msk );
000002  6800              LDR      r0,[r0,#0]
000004  f0400080          ORR      r0,r0,#0x80
000008  f04f4180          MOV      r1,#0x40000000
00000c  f8c10200          STR      r0,[r1,#0x200]
;;;88         __WFI();
000010  bf30              WFI      
;;;89     }
000012  4770              BX       lr
;;;90     
                          ENDP

                  |L15.20|
                          DCD      0x40000200

                          AREA ||i.CLK_PowerDown||, CODE, READONLY, ALIGN=2

                  CLK_PowerDown PROC
;;;72       */
;;;73     void CLK_PowerDown(void)
000000  2004              MOVS     r0,#4
;;;74     {
;;;75         SCB->SCR = SCB_SCR_SLEEPDEEP_Msk;
000002  4906              LDR      r1,|L16.28|
000004  6008              STR      r0,[r1,#0]
;;;76         CLK->PWRCTL |= (CLK_PWRCTL_PDEN_Msk | CLK_PWRCTL_PDWKDLY_Msk );
000006  f04f4080          MOV      r0,#0x40000000
00000a  f8d00200          LDR      r0,[r0,#0x200]
00000e  f0400090          ORR      r0,r0,#0x90
000012  4903              LDR      r1,|L16.32|
000014  6008              STR      r0,[r1,#0]
;;;77         __WFI();
000016  bf30              WFI      
;;;78     }
000018  4770              BX       lr
;;;79     
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0xe000ed10
                  |L16.32|
                          DCD      0x40000200

                          AREA ||i.CLK_SetCoreClock||, CODE, READONLY, ALIGN=2

                  CLK_SetCoreClock PROC
;;;200      */
;;;201    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;202    {
000004  4604              MOV      r4,r0
;;;203        uint32_t u32ClkSrc,u32NR, u32NF,u32Register;
;;;204        u32ClkSrc = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
000006  4820              LDR      r0,|L17.136|
000008  6800              LDR      r0,[r0,#0]
00000a  f0000807          AND      r8,r0,#7
;;;205    
;;;206        if(u32Hclk < FREQ_24MHZ)
00000e  481f              LDR      r0,|L17.140|
000010  4284              CMP      r4,r0
000012  d200              BCS      |L17.22|
;;;207            u32Hclk =FREQ_24MHZ;
000014  4604              MOV      r4,r0
                  |L17.22|
;;;208    
;;;209        if(CLK->PWRCTL & CLK_PWRCTL_HXTEN_Msk) {
000016  481e              LDR      r0,|L17.144|
000018  6800              LDR      r0,[r0,#0]
00001a  f0100f01          TST      r0,#1
00001e  d003              BEQ      |L17.40|
;;;210            u32Register = 0<<CLK_PLLCTL_PLLSRC_Pos;
000020  2500              MOVS     r5,#0
;;;211            u32ClkSrc = __HXT;
000022  f8df8070          LDR      r8,|L17.148|
000026  e003              B        |L17.48|
                  |L17.40|
;;;212        } else {
;;;213            u32Register = 1<<CLK_PLLCTL_PLLSRC_Pos;
000028  f44f2500          MOV      r5,#0x80000
;;;214            u32ClkSrc = __HIRC;
00002c  f8df8068          LDR      r8,|L17.152|
                  |L17.48|
;;;215        }
;;;216    
;;;217        if(u32Hclk<FREQ_50MHZ)  {
000030  481a              LDR      r0,|L17.156|
000032  4284              CMP      r4,r0
000034  d203              BCS      |L17.62|
;;;218            u32Hclk <<=2;
000036  00a4              LSLS     r4,r4,#2
;;;219            u32Register |= (0x3<<CLK_PLLCTL_OUTDV_Pos);
000038  f4454540          ORR      r5,r5,#0xc000
00003c  e002              B        |L17.68|
                  |L17.62|
;;;220        } else {
;;;221            u32Hclk <<=1;
00003e  0064              LSLS     r4,r4,#1
;;;222            u32Register |= (0x1<<CLK_PLLCTL_OUTDV_Pos);
000040  f4454580          ORR      r5,r5,#0x4000
                  |L17.68|
;;;223        }
;;;224        u32NF = u32Hclk / 1000000;
000044  4816              LDR      r0,|L17.160|
000046  fbb4f7f0          UDIV     r7,r4,r0
;;;225        u32NR = u32ClkSrc / 1000000;
00004a  fbb8f6f0          UDIV     r6,r8,r0
;;;226        while( u32NR>(0xF+2) || u32NF>(0xFF+2) ) {
00004e  e001              B        |L17.84|
                  |L17.80|
;;;227            u32NR = u32NR>>1;
000050  0876              LSRS     r6,r6,#1
;;;228            u32NF = u32NF>>1;
000052  087f              LSRS     r7,r7,#1
                  |L17.84|
000054  2e11              CMP      r6,#0x11              ;226
000056  d8fb              BHI      |L17.80|
000058  f5b77f81          CMP      r7,#0x102             ;226
00005c  d2f8              BCS      |L17.80|
;;;229        }
;;;230        CLK->PLLCTL = u32Register | ((u32NR - 2)<<9) | (u32NF - 2) ;
00005e  1eb0              SUBS     r0,r6,#2
000060  ea452040          ORR      r0,r5,r0,LSL #9
000064  1eb9              SUBS     r1,r7,#2
000066  4308              ORRS     r0,r0,r1
000068  490e              LDR      r1,|L17.164|
00006a  6008              STR      r0,[r1,#0]
;;;231        CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
00006c  f04f0004          MOV      r0,#4
000070  f7fffffe          BL       CLK_WaitClockReady
;;;232    
;;;233        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_PLL,CLK_CLKDIV0_HCLK(1));
000074  2100              MOVS     r1,#0
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       CLK_SetHCLK
;;;234    
;;;235        /* Update System Core Clock */
;;;236        SystemCoreClockUpdate();
00007c  f7fffffe          BL       SystemCoreClockUpdate
;;;237    
;;;238        return SystemCoreClock;
000080  4809              LDR      r0,|L17.168|
000082  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;239    }
000084  e8bd81f0          POP      {r4-r8,pc}
;;;240    
                          ENDP

                  |L17.136|
                          DCD      0x40000210
                  |L17.140|
                          DCD      0x016e3600
                  |L17.144|
                          DCD      0x40000200
                  |L17.148|
                          DCD      0x00b71b00
                  |L17.152|
                          DCD      0x01518000
                  |L17.156|
                          DCD      0x02faf080
                  |L17.160|
                          DCD      0x000f4240
                  |L17.164|
                          DCD      0x40000240
                  |L17.168|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_SetHCLK||, CODE, READONLY, ALIGN=2

                  CLK_SetHCLK PROC
;;;252      */
;;;253    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b570              PUSH     {r4-r6,lr}
;;;254    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;255        CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLKDIV_Msk) | u32ClkDiv;
000006  480a              LDR      r0,|L18.48|
000008  6800              LDR      r0,[r0,#0]
00000a  f020000f          BIC      r0,r0,#0xf
00000e  ea400005          ORR      r0,r0,r5
000012  f04f4180          MOV      r1,#0x40000000
000016  f8c10220          STR      r0,[r1,#0x220]
;;;256        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLKSEL_Msk) | u32ClkSrc;
00001a  4806              LDR      r0,|L18.52|
00001c  6800              LDR      r0,[r0,#0]
00001e  f0200007          BIC      r0,r0,#7
000022  ea400004          ORR      r0,r0,r4
000026  f8c10210          STR      r0,[r1,#0x210]
;;;257        SystemCoreClockUpdate();
00002a  f7fffffe          BL       SystemCoreClockUpdate
;;;258    }
00002e  bd70              POP      {r4-r6,pc}
;;;259    
                          ENDP

                  |L18.48|
                          DCD      0x40000220
                  |L18.52|
                          DCD      0x40000210

                          AREA ||i.CLK_SetModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_SetModuleClock PROC
;;;432    
;;;433    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  460b              MOV      r3,r1
;;;435        uint32_t u32tmp=0,u32sel=0,u32div=0;
000004  2100              MOVS     r1,#0
000006  2400              MOVS     r4,#0
000008  468c              MOV      r12,r1
;;;436        
;;;437        if(MODULE_CLKDIV_Msk(u32ModuleIdx)!=MODULE_NoMsk) {
00000a  f3c02587          UBFX     r5,r0,#10,#8
00000e  b18d              CBZ      r5,|L19.52|
;;;438            u32div =(uint32_t)&CLK->CLKDIV0+((MODULE_CLKDIV(u32ModuleIdx))*4);
000010  4d13              LDR      r5,|L19.96|
000012  f3c04681          UBFX     r6,r0,#18,#2
000016  eb050c86          ADD      r12,r5,r6,LSL #2
;;;439            u32tmp = *(volatile uint32_t *)(u32div);
00001a  f8dc1000          LDR      r1,[r12,#0]
;;;440            u32tmp = ( u32tmp & ~(MODULE_CLKDIV_Msk(u32ModuleIdx)<<MODULE_CLKDIV_Pos(u32ModuleIdx)) ) | u32ClkDiv;
00001e  f3c02587          UBFX     r5,r0,#10,#8
000022  f3c01644          UBFX     r6,r0,#5,#5
000026  40b5              LSLS     r5,r5,r6
000028  ea210505          BIC      r5,r1,r5
00002c  ea450102          ORR      r1,r5,r2
;;;441            *(volatile uint32_t *)(u32div) = u32tmp;
000030  f8cc1000          STR      r1,[r12,#0]
                  |L19.52|
;;;442        }
;;;443    		
;;;444        if(MODULE_CLKSEL_Msk(u32ModuleIdx)!=MODULE_NoMsk) {
000034  f3c06542          UBFX     r5,r0,#25,#3
000038  b185              CBZ      r5,|L19.92|
;;;445            u32sel = (uint32_t)&CLK->CLKSEL0+((MODULE_CLKSEL(u32ModuleIdx))*4);
00003a  4d09              LDR      r5,|L19.96|
00003c  3d10              SUBS     r5,r5,#0x10
00003e  f3c07601          UBFX     r6,r0,#28,#2
000042  eb050486          ADD      r4,r5,r6,LSL #2
;;;446            u32tmp = *(volatile uint32_t *)(u32sel);
000046  6821              LDR      r1,[r4,#0]
;;;447            u32tmp = ( u32tmp & ~(MODULE_CLKSEL_Msk(u32ModuleIdx)<<MODULE_CLKSEL_Pos(u32ModuleIdx)) ) | u32ClkSrc;
000048  f3c06542          UBFX     r5,r0,#25,#3
00004c  f3c05604          UBFX     r6,r0,#20,#5
000050  40b5              LSLS     r5,r5,r6
000052  ea210505          BIC      r5,r1,r5
000056  ea450103          ORR      r1,r5,r3
;;;448            *(volatile uint32_t *)(u32sel) = u32tmp;
00005a  6021              STR      r1,[r4,#0]
                  |L19.92|
;;;449        }
;;;450    }
00005c  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP

00005e  0000              DCW      0x0000
                  |L19.96|
                          DCD      0x40000220

                          AREA ||i.CLK_SetSysTickClockSrc||, CODE, READONLY, ALIGN=2

                  CLK_SetSysTickClockSrc PROC
;;;685      */
;;;686    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
000000  4905              LDR      r1,|L20.24|
;;;687    {                                   
;;;688        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLKSEL_Msk) | u32ClkSrc ;
000002  6809              LDR      r1,[r1,#0]
000004  f0210138          BIC      r1,r1,#0x38
000008  ea410100          ORR      r1,r1,r0
00000c  f04f4280          MOV      r2,#0x40000000
000010  f8c21210          STR      r1,[r2,#0x210]
;;;689    }
000014  4770              BX       lr
;;;690    /**
                          ENDP

000016  0000              DCW      0x0000
                  |L20.24|
                          DCD      0x40000210

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;697      */
;;;698    void CLK_SysTickDelay(uint32_t us)
000000  4908              LDR      r1,|L21.36|
;;;699    {
;;;700        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4341              MULS     r1,r0,r1
000006  f04f22e0          MOV      r2,#0xe000e000
00000a  6151              STR      r1,[r2,#0x14]
;;;701        SysTick->VAL  =  (0x00);
00000c  2100              MOVS     r1,#0
00000e  6191              STR      r1,[r2,#0x18]
;;;702        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000010  2105              MOVS     r1,#5
000012  6111              STR      r1,[r2,#0x10]
;;;703    
;;;704        /* Waiting for down-count to zero */
;;;705        while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000014  bf00              NOP      
                  |L21.22|
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6909              LDR      r1,[r1,#0x10]
00001c  f4113f80          TST      r1,#0x10000
000020  d0f9              BEQ      |L21.22|
;;;706    }
000022  4770              BX       lr
;;;707    
                          ENDP

                  |L21.36|
                          DCD      CyclesPerUs

                          AREA ||i.CLK_WaitClockReady||, CODE, READONLY, ALIGN=2

                  CLK_WaitClockReady PROC
;;;722      */
;;;723    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000000  4601              MOV      r1,r0
;;;724    {
;;;725        int32_t i32TimeOutCnt;
;;;726    
;;;727        i32TimeOutCnt = __HSI / 200; /* About 5ms */
000002  f44f32d8          MOV      r2,#0x1b000
;;;728    
;;;729        while((CLK->STATUS & u32ClkMask) != u32ClkMask) {
000006  e005              B        |L22.20|
                  |L22.8|
;;;730            if(i32TimeOutCnt-- <= 0)
000008  1e10              SUBS     r0,r2,#0
00000a  f1a20201          SUB      r2,r2,#1
00000e  dc01              BGT      |L22.20|
;;;731                return 0;
000010  2000              MOVS     r0,#0
                  |L22.18|
;;;732        }
;;;733    		return 1;
;;;734    }
000012  4770              BX       lr
                  |L22.20|
000014  4803              LDR      r0,|L22.36|
000016  6800              LDR      r0,[r0,#0]            ;729
000018  ea000001          AND      r0,r0,r1              ;729
00001c  4288              CMP      r0,r1                 ;729
00001e  d1f3              BNE      |L22.8|
000020  2001              MOVS     r0,#1                 ;733
000022  e7f6              B        |L22.18|
;;;735    
                          ENDP

                  |L22.36|
                          DCD      0x40000250

                          AREA ||.data||, DATA, ALIGN=2

                  u32EscapeFrame
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\clk.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 128
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
