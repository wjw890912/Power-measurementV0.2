; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\net.o --depend=.\obj\net.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC472_442\Include -I..\..\..\..\Library\StdDriver\inc -IE:\Keil\ARM\INC -IE:\Keil\ARM\INC\ARM --omf_browse=.\obj\net.crf ..\net.c]
                          THUMB

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;1464    */
;;;1465   __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1466   {
;;;1467     NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a02              LDR      r2,|L1.20|
00000a  0943              LSRS     r3,r0,#5
00000c  f8421023          STR      r1,[r2,r3,LSL #2]
;;;1468   }
000010  4770              BX       lr
;;;1469   
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1451    */
;;;1452   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1453   {
;;;1454   /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
;;;1455     NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0942              LSRS     r2,r0,#5
00000a  f04f23e0          MOV      r3,#0xe000e000
00000e  eb030282          ADD      r2,r3,r2,LSL #2
000012  f8c21100          STR      r1,[r2,#0x100]
;;;1456   }
000016  4770              BX       lr
;;;1457   
                          ENDP


                          AREA ||i.arp_reply||, CODE, READONLY, ALIGN=2

                  arp_reply PROC
;;;79     
;;;80     static void arp_reply(uint8_t *target_ip, uint8_t *target_mac)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;82         ARP_PACKET  *arp = (ARP_PACKET *)&au8TxBuf[0];
000006  4c17              LDR      r4,|L3.100|
;;;83     
;;;84         memcpy((char *)arp->au8DestMac, (char *)target_mac, 6);
000008  6828              LDR      r0,[r5,#0]
00000a  6020              STR      r0,[r4,#0]
00000c  88a8              LDRH     r0,[r5,#4]
00000e  80a0              STRH     r0,[r4,#4]
;;;85         memcpy((char *)arp->au8SrcMac, (char *)g_au8MacAddr, 6);
000010  4815              LDR      r0,|L3.104|
000012  6801              LDR      r1,[r0,#0]  ; g_au8MacAddr
000014  f8c41006          STR      r1,[r4,#6]
000018  8880              LDRH     r0,[r0,#4]  ; g_au8MacAddr
00001a  8160              STRH     r0,[r4,#0xa]
;;;86         arp->u16Type = SWAP16(PROTOCOL_ARP);
00001c  f44f60c1          MOV      r0,#0x608
000020  81a0              STRH     r0,[r4,#0xc]
;;;87         arp->u16HType = SWAP16(HT_ETHERNET);
000022  f44f7080          MOV      r0,#0x100
000026  81e0              STRH     r0,[r4,#0xe]
;;;88         arp->u16PType = SWAP16(ARP_PTYPE);
000028  2008              MOVS     r0,#8
00002a  8220              STRH     r0,[r4,#0x10]
;;;89         arp->u8HLen = 6;
00002c  2006              MOVS     r0,#6
00002e  74a0              STRB     r0,[r4,#0x12]
;;;90         arp->u8PLen = 4;
000030  2004              MOVS     r0,#4
000032  74e0              STRB     r0,[r4,#0x13]
;;;91         arp->u16Operation = SWAP16(ARP_REPLY);
000034  01c0              LSLS     r0,r0,#7
000036  82a0              STRH     r0,[r4,#0x14]
;;;92         memcpy((char *)arp->au8SenderHA, (char *)g_au8MacAddr, 6);
000038  480b              LDR      r0,|L3.104|
00003a  6801              LDR      r1,[r0,#0]  ; g_au8MacAddr
00003c  f8c41016          STR      r1,[r4,#0x16]
000040  8880              LDRH     r0,[r0,#4]  ; g_au8MacAddr
000042  8360              STRH     r0,[r4,#0x1a]
;;;93         memcpy((char *)arp->su8SenderIP, (char *)g_au8IpAddr, 4);
000044  4809              LDR      r0,|L3.108|
000046  6800              LDR      r0,[r0,#0]  ; g_au8IpAddr
000048  61e0              STR      r0,[r4,#0x1c]
;;;94         memcpy((char *)arp->au8TargetHA, (char *)target_mac, 6);
00004a  6828              LDR      r0,[r5,#0]
00004c  6220              STR      r0,[r4,#0x20]
00004e  88a8              LDRH     r0,[r5,#4]
000050  84a0              STRH     r0,[r4,#0x24]
;;;95         memcpy((char *)arp->au8TargetIP, (char *)target_ip, 4);
000052  6830              LDR      r0,[r6,#0]
000054  f8c40026          STR      r0,[r4,#0x26]
;;;96         EMAC_SendPkt(&au8TxBuf[0], sizeof(ARP_PACKET));
000058  212a              MOVS     r1,#0x2a
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       EMAC_SendPkt
;;;97     }
000060  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      au8TxBuf
                  |L3.104|
                          DCD      g_au8MacAddr
                  |L3.108|
                          DCD      g_au8IpAddr

                          AREA ||i.chksum||, CODE, READONLY, ALIGN=1

                  chksum PROC
;;;65     
;;;66     static uint16_t chksum(uint16_t *cp, int cnt)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4603              MOV      r3,r0
000004  468c              MOV      r12,r1
;;;68         uint16_t i1=0, i2;
000006  2100              MOVS     r1,#0
;;;69     
;;;70         while (cnt--) {
000008  e00d              B        |L4.38|
                  |L4.10|
;;;71             i2 = *cp++;
00000a  f8332b02          LDRH     r2,[r3],#2
;;;72             i2 = SWAP16(i2);
00000e  f44f407f          MOV      r0,#0xff00
000012  ea002002          AND      r0,r0,r2,LSL #8
000016  ea402212          ORR      r2,r0,r2,LSR #8
;;;73             i1 += i2;
00001a  1888              ADDS     r0,r1,r2
00001c  b281              UXTH     r1,r0
;;;74             if (i1 < i2)
00001e  4291              CMP      r1,r2
000020  da01              BGE      |L4.38|
;;;75                 i1++;
000022  1c48              ADDS     r0,r1,#1
000024  b281              UXTH     r1,r0
                  |L4.38|
000026  ea5f000c          MOVS     r0,r12                ;70
00002a  f1ac0c01          SUB      r12,r12,#1            ;70
00002e  d1ec              BNE      |L4.10|
;;;76         }
;;;77         return SWAP16(i1);
000030  f44f407f          MOV      r0,#0xff00
000034  ea002001          AND      r0,r0,r1,LSL #8
000038  ea402011          ORR      r0,r0,r1,LSR #8
;;;78     }
00003c  bd10              POP      {r4,pc}
;;;79     
                          ENDP


                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  dhcp_start PROC
;;;226    
;;;227    int dhcp_start(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;228    {
000004  b08b              SUB      sp,sp,#0x2c
;;;229        uint8_t        *cptr;
;;;230        int            opt_len, len, retry, offer, out;
;;;231        uint8_t        serverMAC[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
000006  a1ca              ADR      r1,|L5.816|
000008  c903              LDM      r1,{r0,r1}
00000a  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;232        uint8_t        serverIP[] = { 0xff, 0xff, 0xff, 0xff };
00000e  a0c8              ADR      r0,|L5.816|
000010  6800              LDR      r0,[r0,#0]
000012  9006              STR      r0,[sp,#0x18]
;;;233        uint32_t    tx_id = 0x8900;            /* just give a start value */
000014  f44f4a09          MOV      r10,#0x8900
;;;234        DHCP_HDR_T  *dhcpRx, *dhcpTx;
;;;235        UDP_PACKET  *udp;
;;;236        uint32_t delay;
;;;237    
;;;238        dhcpTx = (DHCP_HDR_T *)&s_au8DhcpRawBuffer[0];
000018  4dc7              LDR      r5,|L5.824|
;;;239        udp = (UDP_PACKET *)&s_au8DhcpRawBuffer[1500];
00001a  f20550dc          ADD      r0,r5,#0x5dc
00001e  9005              STR      r0,[sp,#0x14]
;;;240        dhcpRx = (DHCP_HDR_T *)((uint32_t)udp + sizeof(UDP_PACKET));
000020  9805              LDR      r0,[sp,#0x14]
000022  f100072a          ADD      r7,r0,#0x2a
;;;241    
;;;242        memset((char *)&dhcpTx[0], 0, sizeof(DHCP_HDR_T));
000026  f44f7109          MOV      r1,#0x224
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_memclr4
;;;243        dhcpTx->op_code = BOOTP_REQUEST;
000030  2001              MOVS     r0,#1
000032  7028              STRB     r0,[r5,#0]
;;;244        dhcpTx->hw_type = HW_TYPE_ETHERNET;        /* Hardware type: Ethernet */
000034  7068              STRB     r0,[r5,#1]
;;;245        dhcpTx->hw_len = sizeof(g_au8MacAddr);     /* Hardware address length */
000036  2006              MOVS     r0,#6
000038  70a8              STRB     r0,[r5,#2]
;;;246        dhcpTx->hops = HOP_COUNT;
00003a  2005              MOVS     r0,#5
00003c  70e8              STRB     r0,[r5,#3]
;;;247        dhcpTx->tx_id = tx_id++;
00003e  f8c5a004          STR      r10,[r5,#4]
000042  f10a0a01          ADD      r10,r10,#1
;;;248        dhcpTx->seconds = 0;        /* Not use this */
000046  2000              MOVS     r0,#0
000048  8128              STRH     r0,[r5,#8]
;;;249    
;;;250    
;;;251        memset((char *)&(dhcpTx->clientIP), 0, 4);
00004a  60e8              STR      r0,[r5,#0xc]
;;;252        //memset((char *)_HostIP, 0, 4);
;;;253        /* give host MAC address */
;;;254    
;;;255        memcpy((char *)&(dhcpTx->client_hw_addr), (char *)g_au8MacAddr, 6);
00004c  48bb              LDR      r0,|L5.828|
00004e  6801              LDR      r1,[r0,#0]  ; g_au8MacAddr
000050  61e9              STR      r1,[r5,#0x1c]
000052  8880              LDRH     r0,[r0,#4]  ; g_au8MacAddr
000054  8428              STRH     r0,[r5,#0x20]
;;;256        memcpy((char *)dhcpTx->options, (char *)s_au8DhcpOptions, sizeof(s_au8DhcpOptions));
000056  49ba              LDR      r1,|L5.832|
000058  680a              LDR      r2,[r1,#0]  ; s_au8DhcpOptions
00005a  f8c520ec          STR      r2,[r5,#0xec]
00005e  888a              LDRH     r2,[r1,#4]  ; s_au8DhcpOptions
000060  f8a520f0          STRH     r2,[r5,#0xf0]
000064  7989              LDRB     r1,[r1,#6]  ; s_au8DhcpOptions
000066  f88510f2          STRB     r1,[r5,#0xf2]
;;;257    
;;;258        opt_len = sizeof(s_au8DhcpOptions);
00006a  2607              MOVS     r6,#7
;;;259        cptr = dhcpTx->options + opt_len;
00006c  f10500ec          ADD      r0,r5,#0xec
000070  1984              ADDS     r4,r0,r6
;;;260    
;;;261        *cptr++ = 55;                  /* param request */
000072  2037              MOVS     r0,#0x37
000074  f8040b01          STRB     r0,[r4],#1
;;;262        *cptr++ = 4;                   /* length */
000078  2004              MOVS     r0,#4
00007a  f8040b01          STRB     r0,[r4],#1
;;;263        *cptr++ = 0x01;                /* net mask */
00007e  2001              MOVS     r0,#1
000080  f8040b01          STRB     r0,[r4],#1
;;;264        *cptr++ = 0x03;                /* gateway */
000084  2003              MOVS     r0,#3
000086  f8040b01          STRB     r0,[r4],#1
;;;265        *cptr++ = 0x06;                /* DNS */
00008a  2006              MOVS     r0,#6
00008c  f8040b01          STRB     r0,[r4],#1
;;;266        *cptr++ = 0x0f;                /* DNS domain */
000090  200f              MOVS     r0,#0xf
000092  f8040b01          STRB     r0,[r4],#1
;;;267        opt_len += 6;
000096  1db6              ADDS     r6,r6,#6
;;;268        *cptr = 0xff;                 /* end of option area */
000098  20ff              MOVS     r0,#0xff
00009a  7020              STRB     r0,[r4,#0]
;;;269    
;;;270        printf("DHCP DISCOVER...\n");
00009c  a0a9              ADR      r0,|L5.836|
00009e  f7fffffe          BL       __2printf
;;;271    
;;;272    wait_offer:
0000a2  bf00              NOP      
                  |L5.164|
;;;273        out = 0;
0000a4  2000              MOVS     r0,#0
0000a6  9009              STR      r0,[sp,#0x24]
;;;274        for (retry = 0; (retry < 16) && (!out); retry++) {
0000a8  4680              MOV      r8,r0
0000aa  e044              B        |L5.310|
                  |L5.172|
;;;275            if (retry)
0000ac  f1b80f00          CMP      r8,#0
0000b0  d003              BEQ      |L5.186|
;;;276                printf("DHCP DISCOVER retry: %d\n", retry);
0000b2  4641              MOV      r1,r8
0000b4  a0a8              ADR      r0,|L5.856|
0000b6  f7fffffe          BL       __2printf
                  |L5.186|
;;;277    
;;;278            udp_send(g_au8MacAddr, g_au8IpAddr, CLIENT_PORT,
0000ba  f10603ed          ADD      r3,r6,#0xed
0000be  2143              MOVS     r1,#0x43
0000c0  a806              ADD      r0,sp,#0x18
0000c2  e88d0023          STM      sp,{r0,r1,r5}
0000c6  9303              STR      r3,[sp,#0xc]
0000c8  ab07              ADD      r3,sp,#0x1c
0000ca  2244              MOVS     r2,#0x44
0000cc  49a9              LDR      r1,|L5.884|
0000ce  489b              LDR      r0,|L5.828|
0000d0  f7fffffe          BL       udp_send
;;;279                     serverMAC, serverIP, SERVER_PORT,
;;;280                     (uint8_t *)dhcpTx, DHCP_OPT_OFFSET + opt_len + 1);
;;;281    
;;;282            delay = 0x600000;
0000d4  f44f0bc0          MOV      r11,#0x600000
;;;283            while(delay--) {
0000d8  e020              B        |L5.284|
                  |L5.218|
;;;284                if(s_u32PktRdy) {
0000da  48a7              LDR      r0,|L5.888|
0000dc  6800              LDR      r0,[r0,#0]  ; s_u32PktRdy
0000de  b1e8              CBZ      r0,|L5.284|
;;;285                    NVIC_DisableIRQ(EMAC_RX_IRQn);
0000e0  205d              MOVS     r0,#0x5d
0000e2  f7fffffe          BL       NVIC_DisableIRQ
;;;286                    memcpy((char *)&s_au8DhcpRawBuffer[1500], au8RxBuf, s_u32PktRdy);
0000e6  48a4              LDR      r0,|L5.888|
0000e8  49a4              LDR      r1,|L5.892|
0000ea  6802              LDR      r2,[r0,#0]  ; s_u32PktRdy
0000ec  48a4              LDR      r0,|L5.896|
0000ee  f7fffffe          BL       __aeabi_memcpy
;;;287                    s_u32PktRdy = 0;
0000f2  2000              MOVS     r0,#0
0000f4  49a0              LDR      r1,|L5.888|
0000f6  6008              STR      r0,[r1,#0]  ; s_u32PktRdy
;;;288                    NVIC_EnableIRQ(EMAC_RX_IRQn);
0000f8  205d              MOVS     r0,#0x5d
0000fa  f7fffffe          BL       NVIC_EnableIRQ
;;;289                    if ((udp->u16DestPort == SWAP16(CLIENT_PORT)) &&
0000fe  9805              LDR      r0,[sp,#0x14]
000100  8c80              LDRH     r0,[r0,#0x24]
000102  f5b04f88          CMP      r0,#0x4400
000106  d109              BNE      |L5.284|
;;;290                            (dhcpRx->op_code == BOOTP_REPLY) &&
000108  7838              LDRB     r0,[r7,#0]
00010a  2802              CMP      r0,#2
00010c  d106              BNE      |L5.284|
;;;291                            (dhcpRx->tx_id == dhcpTx->tx_id)) {
00010e  6878              LDR      r0,[r7,#4]
000110  6869              LDR      r1,[r5,#4]
000112  4288              CMP      r0,r1
000114  d102              BNE      |L5.284|
;;;292                        out = 1;
000116  2001              MOVS     r0,#1
000118  9009              STR      r0,[sp,#0x24]
;;;293                        break;
00011a  e004              B        |L5.294|
                  |L5.284|
00011c  ea5f000b          MOVS     r0,r11                ;283
000120  f1ab0b01          SUB      r11,r11,#1            ;283
000124  d1d9              BNE      |L5.218|
                  |L5.294|
000126  bf00              NOP      
;;;294                    }
;;;295                }
;;;296            }
;;;297    
;;;298            if (delay == 0)
000128  f1bb0f00          CMP      r11,#0
00012c  d100              BNE      |L5.304|
;;;299                continue;
00012e  e000              B        |L5.306|
                  |L5.304|
000130  bf00              NOP      
                  |L5.306|
000132  f1080801          ADD      r8,r8,#1              ;274
                  |L5.310|
000136  f1b80f10          CMP      r8,#0x10              ;274
00013a  da02              BGE      |L5.322|
00013c  9809              LDR      r0,[sp,#0x24]         ;274
00013e  2800              CMP      r0,#0                 ;274
000140  d0b4              BEQ      |L5.172|
                  |L5.322|
;;;300    
;;;301    
;;;302        }  /* end of for */
;;;303    
;;;304        if (retry >= 16)
000142  f1b80f10          CMP      r8,#0x10
000146  db04              BLT      |L5.338|
;;;305            return -1;                /* DHCP failed */
000148  f04f30ff          MOV      r0,#0xffffffff
                  |L5.332|
;;;306    
;;;307        cptr = (uint8_t *)&dhcpRx->options + 4;
;;;308    
;;;309        /* find out DHCP OFFER and copy server identifier */
;;;310        offer = 0;
;;;311    
;;;312        while (*cptr != 0xff) {
;;;313            len = cptr[1] + 2;
;;;314            if (*cptr == 53) {
;;;315                if (cptr[2] == DHCP_OFFER)
;;;316                    offer = 1;
;;;317            } else if (*cptr == 54) {        /* add server ID */
;;;318                memcpy((char *)(dhcpTx->options) + opt_len, (char *)cptr, len);
;;;319                opt_len += len;
;;;320            }
;;;321            cptr += len;
;;;322        }
;;;323    
;;;324        if (offer == 0) {
;;;325            printf("No Offer!!\n");
;;;326            goto wait_offer;             /* wrong type, read again */
;;;327        }
;;;328    
;;;329        cptr =     (uint8_t *)(dhcpTx->options) + opt_len;
;;;330        *cptr++ = 50;
;;;331        *cptr++ = 4;
;;;332        memcpy((char *)cptr, (char *)&(dhcpRx->yourIP), 4);
;;;333        opt_len += 6;
;;;334    
;;;335        dhcpTx->options[6] = DHCP_REQUEST;
;;;336        dhcpTx->options[opt_len] = 0xff;
;;;337        dhcpTx->tx_id = tx_id++;
;;;338    
;;;339        printf("DHCP REQUEST...\n");
;;;340    
;;;341        out = 0;
;;;342        for (retry = 0; (retry < 16) && (!out); retry++) {
;;;343            if (retry)
;;;344                printf("DHCP REQUEST retry: %d\n", retry);
;;;345    
;;;346            udp_send(g_au8MacAddr, g_au8IpAddr, CLIENT_PORT,
;;;347                     serverMAC, serverIP, SERVER_PORT,
;;;348                     (uint8_t *)dhcpTx, DHCP_OPT_OFFSET + opt_len + 1);
;;;349    
;;;350            delay = 0x600000;
;;;351            while(delay--) {
;;;352                if(s_u32PktRdy) {
;;;353                    NVIC_DisableIRQ(EMAC_RX_IRQn);
;;;354                    memcpy((char *)&s_au8DhcpRawBuffer[1500], au8RxBuf, s_u32PktRdy);
;;;355                    s_u32PktRdy = 0;
;;;356                    NVIC_EnableIRQ(EMAC_RX_IRQn);
;;;357                    if((udp->u16DestPort == SWAP16(CLIENT_PORT)) &&
;;;358                            (dhcpRx->op_code != BOOTP_REPLY) &&
;;;359                            (dhcpRx->tx_id != dhcpTx->tx_id)) {
;;;360                        out = 1;
;;;361                        break;
;;;362                    }
;;;363                }
;;;364            }
;;;365    
;;;366            if (delay == 0)
;;;367                continue;
;;;368    
;;;369            cptr = (uint8_t *)&dhcpRx->options + 4;
;;;370    
;;;371            while (*cptr != 0xff) {
;;;372                len = cptr[1] + 2;
;;;373                if (cptr[0] == 53) {
;;;374                    if (cptr[2] == DHCP_ACK)
;;;375                        goto acked;
;;;376                    if (cptr[2] == DHCP_NAK) {
;;;377                        printf("DHCP Naked!\n");
;;;378    
;;;379                        return -1;
;;;380                    }
;;;381                }
;;;382                cptr += len;
;;;383            }
;;;384        }
;;;385    
;;;386        return -1;                /* DHCP failed */
;;;387    
;;;388    acked:
;;;389        printf("DHCP ACKed...\n");
;;;390    
;;;391        memcpy((char *)g_au8IpAddr, (char *)&(dhcpRx->yourIP), 4);
;;;392        printf("IP Address. . . . . . . . . . . . : %d.%d.%d.%d\n", g_au8IpAddr[0], g_au8IpAddr[1],
;;;393               g_au8IpAddr[2], g_au8IpAddr[3]);
;;;394    
;;;395        cptr = (uint8_t *)&dhcpRx->options + 4;
;;;396    
;;;397        while (*cptr != 0xff) {
;;;398            len = cptr[1];
;;;399            switch (*cptr) {
;;;400            case 1:                 /* subnet mask */
;;;401                printf("Subnet Mask . . . . . . . . . . . : %d.%d.%d.%d\n", cptr[2], cptr[3], cptr[4], cptr[5]);
;;;402                break;
;;;403            case 2:                 /* time offset */
;;;404                break;
;;;405            case 3:                 /* router, take 1 */
;;;406                printf("Default Gateway . . . . . . . . . : %d.%d.%d.%d\n", cptr[2], cptr[3], cptr[4], cptr[5]);
;;;407                break;
;;;408            case 4:                 /* time server */
;;;409                printf("Time server: %d.%d.%d.%d\n", cptr[2], cptr[3], cptr[4], cptr[5]);
;;;410                break;
;;;411    
;;;412            }
;;;413            cptr += len + 2;
;;;414        }
;;;415    
;;;416        return 0;
;;;417    }
00014c  b00b              ADD      sp,sp,#0x2c
00014e  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.338|
000152  f10704f0          ADD      r4,r7,#0xf0           ;307
000156  2000              MOVS     r0,#0                 ;310
000158  900a              STR      r0,[sp,#0x28]         ;310
00015a  e017              B        |L5.396|
                  |L5.348|
00015c  7860              LDRB     r0,[r4,#1]            ;313
00015e  f1000902          ADD      r9,r0,#2              ;313
000162  7820              LDRB     r0,[r4,#0]            ;314
000164  2835              CMP      r0,#0x35              ;314
000166  d105              BNE      |L5.372|
000168  78a0              LDRB     r0,[r4,#2]            ;315
00016a  2802              CMP      r0,#2                 ;315
00016c  d10d              BNE      |L5.394|
00016e  2001              MOVS     r0,#1                 ;316
000170  900a              STR      r0,[sp,#0x28]         ;316
000172  e00a              B        |L5.394|
                  |L5.372|
000174  7820              LDRB     r0,[r4,#0]            ;317
000176  2836              CMP      r0,#0x36              ;317
000178  d107              BNE      |L5.394|
00017a  f10501ec          ADD      r1,r5,#0xec           ;318
00017e  1988              ADDS     r0,r1,r6              ;318
000180  464a              MOV      r2,r9                 ;318
000182  4621              MOV      r1,r4                 ;318
000184  f7fffffe          BL       __aeabi_memcpy
000188  444e              ADD      r6,r6,r9              ;319
                  |L5.394|
00018a  444c              ADD      r4,r4,r9              ;321
                  |L5.396|
00018c  7820              LDRB     r0,[r4,#0]            ;312
00018e  28ff              CMP      r0,#0xff              ;312
000190  d1e4              BNE      |L5.348|
000192  980a              LDR      r0,[sp,#0x28]         ;324
000194  b918              CBNZ     r0,|L5.414|
000196  a07b              ADR      r0,|L5.900|
000198  f7fffffe          BL       __2printf
00019c  e782              B        |L5.164|
                  |L5.414|
00019e  f10500ec          ADD      r0,r5,#0xec           ;329
0001a2  1984              ADDS     r4,r0,r6              ;329
0001a4  2032              MOVS     r0,#0x32              ;330
0001a6  f8040b01          STRB     r0,[r4],#1            ;330
0001aa  2004              MOVS     r0,#4                 ;331
0001ac  f8040b01          STRB     r0,[r4],#1            ;331
0001b0  6938              LDR      r0,[r7,#0x10]         ;332
0001b2  6020              STR      r0,[r4,#0]            ;332
0001b4  1db6              ADDS     r6,r6,#6              ;333
0001b6  2103              MOVS     r1,#3                 ;335
0001b8  20f2              MOVS     r0,#0xf2              ;335
0001ba  5541              STRB     r1,[r0,r5]            ;335
0001bc  21ff              MOVS     r1,#0xff              ;336
0001be  f10500ec          ADD      r0,r5,#0xec           ;336
0001c2  5581              STRB     r1,[r0,r6]            ;336
0001c4  f8c5a004          STR      r10,[r5,#4]           ;337
0001c8  f10a0a01          ADD      r10,r10,#1            ;337
0001cc  a070              ADR      r0,|L5.912|
0001ce  f7fffffe          BL       __2printf
0001d2  2000              MOVS     r0,#0                 ;341
0001d4  9009              STR      r0,[sp,#0x24]         ;341
0001d6  4680              MOV      r8,r0                 ;342
0001d8  e05e              B        |L5.664|
                  |L5.474|
0001da  f1b80f00          CMP      r8,#0                 ;343
0001de  d003              BEQ      |L5.488|
0001e0  4641              MOV      r1,r8                 ;344
0001e2  a070              ADR      r0,|L5.932|
0001e4  f7fffffe          BL       __2printf
                  |L5.488|
0001e8  f10603ed          ADD      r3,r6,#0xed           ;346
0001ec  2143              MOVS     r1,#0x43              ;346
0001ee  a806              ADD      r0,sp,#0x18           ;346
0001f0  e88d0023          STM      sp,{r0,r1,r5}         ;346
0001f4  9303              STR      r3,[sp,#0xc]          ;346
0001f6  ab07              ADD      r3,sp,#0x1c           ;346
0001f8  2244              MOVS     r2,#0x44              ;346
0001fa  495e              LDR      r1,|L5.884|
0001fc  484f              LDR      r0,|L5.828|
0001fe  f7fffffe          BL       udp_send
000202  f44f0bc0          MOV      r11,#0x600000         ;350
000206  e020              B        |L5.586|
                  |L5.520|
000208  485b              LDR      r0,|L5.888|
00020a  6800              LDR      r0,[r0,#0]            ;352  ; s_u32PktRdy
00020c  b1e8              CBZ      r0,|L5.586|
00020e  205d              MOVS     r0,#0x5d              ;353
000210  f7fffffe          BL       NVIC_DisableIRQ
000214  4858              LDR      r0,|L5.888|
000216  4959              LDR      r1,|L5.892|
000218  6802              LDR      r2,[r0,#0]            ;354  ; s_u32PktRdy
00021a  4859              LDR      r0,|L5.896|
00021c  f7fffffe          BL       __aeabi_memcpy
000220  2000              MOVS     r0,#0                 ;355
000222  4955              LDR      r1,|L5.888|
000224  6008              STR      r0,[r1,#0]            ;355  ; s_u32PktRdy
000226  205d              MOVS     r0,#0x5d              ;356
000228  f7fffffe          BL       NVIC_EnableIRQ
00022c  9805              LDR      r0,[sp,#0x14]         ;357
00022e  8c80              LDRH     r0,[r0,#0x24]         ;357
000230  f5b04f88          CMP      r0,#0x4400            ;357
000234  d109              BNE      |L5.586|
000236  7838              LDRB     r0,[r7,#0]            ;358
000238  2802              CMP      r0,#2                 ;358
00023a  d006              BEQ      |L5.586|
00023c  6878              LDR      r0,[r7,#4]            ;359
00023e  6869              LDR      r1,[r5,#4]            ;359
000240  4288              CMP      r0,r1                 ;359
000242  d002              BEQ      |L5.586|
000244  2001              MOVS     r0,#1                 ;360
000246  9009              STR      r0,[sp,#0x24]         ;360
000248  e004              B        |L5.596|
                  |L5.586|
00024a  ea5f000b          MOVS     r0,r11                ;351
00024e  f1ab0b01          SUB      r11,r11,#1            ;351
000252  d1d9              BNE      |L5.520|
                  |L5.596|
000254  bf00              NOP                            ;361
000256  f1bb0f00          CMP      r11,#0                ;366
00025a  d100              BNE      |L5.606|
00025c  e01a              B        |L5.660|
                  |L5.606|
00025e  f10704f0          ADD      r4,r7,#0xf0           ;369
000262  e013              B        |L5.652|
                  |L5.612|
000264  7860              LDRB     r0,[r4,#1]            ;372
000266  f1000902          ADD      r9,r0,#2              ;372
00026a  7820              LDRB     r0,[r4,#0]            ;373
00026c  2835              CMP      r0,#0x35              ;373
00026e  d10c              BNE      |L5.650|
000270  78a0              LDRB     r0,[r4,#2]            ;374
000272  2805              CMP      r0,#5                 ;374
000274  d100              BNE      |L5.632|
000276  e018              B        |L5.682|
                  |L5.632|
000278  78a0              LDRB     r0,[r4,#2]            ;376
00027a  2806              CMP      r0,#6                 ;376
00027c  d105              BNE      |L5.650|
00027e  a04f              ADR      r0,|L5.956|
000280  f7fffffe          BL       __2printf
000284  f04f30ff          MOV      r0,#0xffffffff        ;379
000288  e760              B        |L5.332|
                  |L5.650|
00028a  444c              ADD      r4,r4,r9              ;382
                  |L5.652|
00028c  7820              LDRB     r0,[r4,#0]            ;371
00028e  28ff              CMP      r0,#0xff              ;371
000290  d1e8              BNE      |L5.612|
000292  bf00              NOP                            ;367
                  |L5.660|
000294  f1080801          ADD      r8,r8,#1              ;342
                  |L5.664|
000298  f1b80f10          CMP      r8,#0x10              ;342
00029c  da02              BGE      |L5.676|
00029e  9809              LDR      r0,[sp,#0x24]         ;342
0002a0  2800              CMP      r0,#0                 ;342
0002a2  d09a              BEQ      |L5.474|
                  |L5.676|
0002a4  f04f30ff          MOV      r0,#0xffffffff        ;386
0002a8  e750              B        |L5.332|
                  |L5.682|
0002aa  a048              ADR      r0,|L5.972|
0002ac  f7fffffe          BL       __2printf
0002b0  4830              LDR      r0,|L5.884|
0002b2  6939              LDR      r1,[r7,#0x10]         ;391
0002b4  6001              STR      r1,[r0,#0]            ;391  ; g_au8IpAddr
0002b6  78c3              LDRB     r3,[r0,#3]            ;392  ; g_au8IpAddr
0002b8  9300              STR      r3,[sp,#0]            ;392
0002ba  7883              LDRB     r3,[r0,#2]            ;392  ; g_au8IpAddr
0002bc  7842              LDRB     r2,[r0,#1]            ;392  ; g_au8IpAddr
0002be  7801              LDRB     r1,[r0,#0]            ;392  ; g_au8IpAddr
0002c0  a046              ADR      r0,|L5.988|
0002c2  f7fffffe          BL       __2printf
0002c6  f10704f0          ADD      r4,r7,#0xf0           ;395
0002ca  e02b              B        |L5.804|
                  |L5.716|
0002cc  f8949001          LDRB     r9,[r4,#1]            ;398
0002d0  7820              LDRB     r0,[r4,#0]            ;399
0002d2  2801              CMP      r0,#1                 ;399
0002d4  d006              BEQ      |L5.740|
0002d6  2802              CMP      r0,#2                 ;399
0002d8  d00d              BEQ      |L5.758|
0002da  2803              CMP      r0,#3                 ;399
0002dc  d00c              BEQ      |L5.760|
0002de  2804              CMP      r0,#4                 ;399
0002e0  d11c              BNE      |L5.796|
0002e2  e012              B        |L5.778|
                  |L5.740|
0002e4  7963              LDRB     r3,[r4,#5]            ;401
0002e6  9300              STR      r3,[sp,#0]            ;401
0002e8  7923              LDRB     r3,[r4,#4]            ;401
0002ea  78e2              LDRB     r2,[r4,#3]            ;401
0002ec  78a1              LDRB     r1,[r4,#2]            ;401
0002ee  a048              ADR      r0,|L5.1040|
0002f0  f7fffffe          BL       __2printf
0002f4  e012              B        |L5.796|
                  |L5.758|
0002f6  e011              B        |L5.796|
                  |L5.760|
0002f8  7963              LDRB     r3,[r4,#5]            ;406
0002fa  9300              STR      r3,[sp,#0]            ;406
0002fc  7923              LDRB     r3,[r4,#4]            ;406
0002fe  78e2              LDRB     r2,[r4,#3]            ;406
000300  78a1              LDRB     r1,[r4,#2]            ;406
000302  a050              ADR      r0,|L5.1092|
000304  f7fffffe          BL       __2printf
000308  e008              B        |L5.796|
                  |L5.778|
00030a  7963              LDRB     r3,[r4,#5]            ;409
00030c  9300              STR      r3,[sp,#0]            ;409
00030e  7923              LDRB     r3,[r4,#4]            ;409
000310  78e2              LDRB     r2,[r4,#3]            ;409
000312  78a1              LDRB     r1,[r4,#2]            ;409
000314  a058              ADR      r0,|L5.1144|
000316  f7fffffe          BL       __2printf
00031a  bf00              NOP                            ;410
                  |L5.796|
00031c  bf00              NOP                            ;402
00031e  f1090002          ADD      r0,r9,#2              ;413
000322  4404              ADD      r4,r4,r0              ;413
                  |L5.804|
000324  7820              LDRB     r0,[r4,#0]            ;397
000326  28ff              CMP      r0,#0xff              ;397
000328  d1d0              BNE      |L5.716|
00032a  2000              MOVS     r0,#0                 ;416
00032c  e70e              B        |L5.332|
;;;418    
                          ENDP

00032e  0000              DCW      0x0000
                  |L5.816|
000330  ffffffff          DCB      255,255,255,255,255,255,0
000334  ffff00  
000337  00                DCB      0
                  |L5.824|
                          DCD      s_au8DhcpRawBuffer
                  |L5.828|
                          DCD      g_au8MacAddr
                  |L5.832|
                          DCD      s_au8DhcpOptions
                  |L5.836|
000344  44484350          DCB      "DHCP DISCOVER...\n",0
000348  20444953
00034c  434f5645
000350  522e2e2e
000354  0a00    
000356  00                DCB      0
000357  00                DCB      0
                  |L5.856|
000358  44484350          DCB      "DHCP DISCOVER retry: %d\n",0
00035c  20444953
000360  434f5645
000364  52207265
000368  7472793a
00036c  2025640a
000370  00      
000371  00                DCB      0
000372  00                DCB      0
000373  00                DCB      0
                  |L5.884|
                          DCD      g_au8IpAddr
                  |L5.888|
                          DCD      s_u32PktRdy
                  |L5.892|
                          DCD      au8RxBuf
                  |L5.896|
                          DCD      s_au8DhcpRawBuffer+0x5dc
                  |L5.900|
000384  4e6f204f          DCB      "No Offer!!\n",0
000388  66666572
00038c  21210a00
                  |L5.912|
000390  44484350          DCB      "DHCP REQUEST...\n",0
000394  20524551
000398  55455354
00039c  2e2e2e0a
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L5.932|
0003a4  44484350          DCB      "DHCP REQUEST retry: %d\n",0
0003a8  20524551
0003ac  55455354
0003b0  20726574
0003b4  72793a20
0003b8  25640a00
                  |L5.956|
0003bc  44484350          DCB      "DHCP Naked!\n",0
0003c0  204e616b
0003c4  6564210a
0003c8  00      
0003c9  00                DCB      0
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L5.972|
0003cc  44484350          DCB      "DHCP ACKed...\n",0
0003d0  2041434b
0003d4  65642e2e
0003d8  2e0a00  
0003db  00                DCB      0
                  |L5.988|
0003dc  49502041          DCB      "IP Address. . . . . . . . . . . . : %d.%d.%d.%d\n",0
0003e0  64647265
0003e4  73732e20
0003e8  2e202e20
0003ec  2e202e20
0003f0  2e202e20
0003f4  2e202e20
0003f8  2e202e20
0003fc  2e203a20
000400  25642e25
000404  642e2564
000408  2e25640a
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
                  |L5.1040|
000410  5375626e          DCB      "Subnet Mask . . . . . . . . . . . : %d.%d.%d.%d\n",0
000414  6574204d
000418  61736b20
00041c  2e202e20
000420  2e202e20
000424  2e202e20
000428  2e202e20
00042c  2e202e20
000430  2e203a20
000434  25642e25
000438  642e2564
00043c  2e25640a
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  44656661          DCB      "Default Gateway . . . . . . . . . : %d.%d.%d.%d\n",0
000448  756c7420
00044c  47617465
000450  77617920
000454  2e202e20
000458  2e202e20
00045c  2e202e20
000460  2e202e20
000464  2e203a20
000468  25642e25
00046c  642e2564
000470  2e25640a
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L5.1144|
000478  54696d65          DCB      "Time server: %d.%d.%d.%d\n",0
00047c  20736572
000480  7665723a
000484  2025642e
000488  25642e25
00048c  642e2564
000490  0a00    
000492  00                DCB      0
000493  00                DCB      0

                          AREA ||i.process_rx_packet||, CODE, READONLY, ALIGN=2

                  process_rx_packet PROC
;;;137    
;;;138    int process_rx_packet(uint8_t *pu8Packet, uint32_t u32Len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;139    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;140        ARP_PACKET    *arp = (ARP_PACKET *)pu8Packet;
000008  463e              MOV      r6,r7
;;;141        IP_PACKET    *ip  = (IP_PACKET *)pu8Packet;
00000a  463c              MOV      r4,r7
;;;142        UDP_PACKET    *udp  = (UDP_PACKET *)pu8Packet;
00000c  46b9              MOV      r9,r7
;;;143    
;;;144        if (pu8Packet[0] == 0xFF) {     /* this is a broadcast packet */
00000e  7838              LDRB     r0,[r7,#0]
000010  28ff              CMP      r0,#0xff
000012  d127              BNE      |L6.100|
;;;145            /*
;;;146             *  We manage the ARP reply process here.
;;;147             *  In the following code, if we have received a ARP request,
;;;148             *  we send ARP reply immediately.
;;;149             */
;;;150            if ((!COMPARE_IP(arp->au8TargetIP, g_au8IpAddr)) &&
000014  2029              MOVS     r0,#0x29
000016  5d80              LDRB     r0,[r0,r6]
000018  4972              LDR      r1,|L6.484|
00001a  78c9              LDRB     r1,[r1,#3]  ; g_au8IpAddr
00001c  4048              EORS     r0,r0,r1
00001e  2128              MOVS     r1,#0x28
000020  5d89              LDRB     r1,[r1,r6]
000022  4a70              LDR      r2,|L6.484|
000024  7892              LDRB     r2,[r2,#2]  ; g_au8IpAddr
000026  4051              EORS     r1,r1,r2
000028  4308              ORRS     r0,r0,r1
00002a  2127              MOVS     r1,#0x27
00002c  5d89              LDRB     r1,[r1,r6]
00002e  4a6d              LDR      r2,|L6.484|
000030  7852              LDRB     r2,[r2,#1]  ; g_au8IpAddr
000032  4051              EORS     r1,r1,r2
000034  4308              ORRS     r0,r0,r1
000036  f8961026          LDRB     r1,[r6,#0x26]
00003a  4a6a              LDR      r2,|L6.484|
00003c  7812              LDRB     r2,[r2,#0]  ; g_au8IpAddr
00003e  4051              EORS     r1,r1,r2
000040  4308              ORRS     r0,r0,r1
000042  d10c              BNE      |L6.94|
;;;151                    (arp->u16Type == SWAP16(PROTOCOL_ARP)) && (arp->u16Operation == SWAP16(ARP_REQUEST))) {
000044  89b0              LDRH     r0,[r6,#0xc]
000046  f5b06fc1          CMP      r0,#0x608
00004a  d108              BNE      |L6.94|
00004c  8ab0              LDRH     r0,[r6,#0x14]
00004e  f5b07f80          CMP      r0,#0x100
000052  d104              BNE      |L6.94|
;;;152                arp_reply(arp->su8SenderIP, arp->au8SenderHA);
000054  f1060116          ADD      r1,r6,#0x16
000058  1d88              ADDS     r0,r1,#6
00005a  f7fffffe          BL       arp_reply
                  |L6.94|
;;;153            }
;;;154    
;;;155            return 0;
00005e  2000              MOVS     r0,#0
                  |L6.96|
;;;156        } else {                    /* this is a multicast or unicast packet */
;;;157            /*
;;;158             *  This is a unicast packet to us.
;;;159             */
;;;160            if ((ip->u8Prot == IP_PRO_TCP) && (!COMPARE_IP(ip->au8DestIP, g_au8IpAddr))) {
;;;161                // write me: process TCP packets here
;;;162                return 0;
;;;163            }
;;;164    
;;;165            if ((ip->u8Prot == IP_PRO_UDP) && (udp->u16SrcPort == SWAP16(67))) {
;;;166                // This is a DHCP packet...
;;;167    
;;;168                s_u32PktRdy = u32Len;
;;;169                memcpy(au8RxBuf, pu8Packet, u32Len);
;;;170                return 0;
;;;171            }
;;;172    
;;;173            if ((ip->u8Prot == IP_PRO_UDP) && (!COMPARE_IP(ip->au8DestIP, g_au8IpAddr))) {
;;;174                // write me: process UDP packets here
;;;175                return 0;
;;;176            }
;;;177    
;;;178            /*
;;;179             * Check ICMP Echo Request packet -
;;;180             * if matched, we reply it right here
;;;181             */
;;;182            if ((ip->u8Prot == IP_PRO_ICMP) && (!COMPARE_IP(ip->au8DestIP, g_au8IpAddr)) &&
;;;183                    (pu8Packet[34] == 0x08)) {
;;;184                IP_PACKET    *tx_ip;
;;;185    
;;;186    
;;;187                /* duplicate packet then modify it */
;;;188                memcpy((char *)&au8TxBuf[0], (char *)&pu8Packet[0], u32Len);
;;;189    
;;;190    
;;;191                tx_ip = (IP_PACKET *)&au8TxBuf[0];
;;;192                memcpy((char *)tx_ip->au8DestMac, (char *)ip->au8SrcMac, 6);
;;;193                memcpy((char *)tx_ip->au8SrcMac, (char *)g_au8MacAddr, 6);
;;;194                tx_ip->u16Type = SWAP16(PROTOCOL_IP);
;;;195                tx_ip->u8VerHLen = 0x45;         /* fixed value, do not change it */
;;;196                tx_ip->u8ToS = 0;                /* no special priority */
;;;197                tx_ip->u16TLen = SWAP16(60);
;;;198                tx_ip->u16ID = SWAP16(s_u16IpPacketId);
;;;199                tx_ip->u16Frag = 0;
;;;200                tx_ip->u8TTL = 64;
;;;201                tx_ip->u8Prot = IP_PRO_ICMP;
;;;202                tx_ip->u16HdrChksum = 0;
;;;203                memcpy((char *)tx_ip->au8SrcIP, (char *)g_au8IpAddr, 4);
;;;204                memcpy((char *)tx_ip->au8DestIP, (char *)ip->au8SrcIP, 4);
;;;205                tx_ip->u16HdrChksum = ~chksum((uint16_t *)&tx_ip->u8VerHLen, 10);  /* 20 bytes */
;;;206    
;;;207                s_u16IpPacketId++;
;;;208    
;;;209                /* ICMP reply */
;;;210                au8TxBuf[34] = 0;
;;;211    
;;;212                /* ICMP checksum */
;;;213                au8TxBuf[36] = 0;
;;;214                au8TxBuf[37] = 0;
;;;215                *(uint16_t *)&au8TxBuf[36] = ~chksum((uint16_t *)&au8TxBuf[34], (u32Len - 34) / 2);
;;;216    
;;;217                EMAC_SendPkt(au8TxBuf, u32Len);
;;;218    
;;;219                return 0;
;;;220            }
;;;221        }
;;;222    
;;;223        return 0;
;;;224    }
000060  e8bd87f0          POP      {r4-r10,pc}
                  |L6.100|
000064  7de0              LDRB     r0,[r4,#0x17]         ;160
000066  2806              CMP      r0,#6                 ;160
000068  d116              BNE      |L6.152|
00006a  2021              MOVS     r0,#0x21              ;160
00006c  5d00              LDRB     r0,[r0,r4]            ;160
00006e  495d              LDR      r1,|L6.484|
000070  78c9              LDRB     r1,[r1,#3]            ;160  ; g_au8IpAddr
000072  4048              EORS     r0,r0,r1              ;160
000074  2120              MOVS     r1,#0x20              ;160
000076  5d09              LDRB     r1,[r1,r4]            ;160
000078  4a5a              LDR      r2,|L6.484|
00007a  7892              LDRB     r2,[r2,#2]            ;160  ; g_au8IpAddr
00007c  4051              EORS     r1,r1,r2              ;160
00007e  4308              ORRS     r0,r0,r1              ;160
000080  7fe1              LDRB     r1,[r4,#0x1f]         ;160
000082  4a58              LDR      r2,|L6.484|
000084  7852              LDRB     r2,[r2,#1]            ;160  ; g_au8IpAddr
000086  4051              EORS     r1,r1,r2              ;160
000088  4308              ORRS     r0,r0,r1              ;160
00008a  7fa1              LDRB     r1,[r4,#0x1e]         ;160
00008c  4a55              LDR      r2,|L6.484|
00008e  7812              LDRB     r2,[r2,#0]            ;160  ; g_au8IpAddr
000090  4051              EORS     r1,r1,r2              ;160
000092  4308              ORRS     r0,r0,r1              ;160
000094  d100              BNE      |L6.152|
000096  e7e3              B        |L6.96|
                  |L6.152|
000098  7de0              LDRB     r0,[r4,#0x17]         ;165
00009a  2811              CMP      r0,#0x11              ;165
00009c  d10e              BNE      |L6.188|
00009e  f8b90022          LDRH     r0,[r9,#0x22]         ;165
0000a2  f5b04f86          CMP      r0,#0x4300            ;165
0000a6  d109              BNE      |L6.188|
0000a8  484f              LDR      r0,|L6.488|
0000aa  f8c08000          STR      r8,[r0,#0]            ;168  ; s_u32PktRdy
0000ae  4642              MOV      r2,r8                 ;169
0000b0  4639              MOV      r1,r7                 ;169
0000b2  484e              LDR      r0,|L6.492|
0000b4  f7fffffe          BL       __aeabi_memcpy
0000b8  2000              MOVS     r0,#0                 ;170
0000ba  e7d1              B        |L6.96|
                  |L6.188|
0000bc  7de0              LDRB     r0,[r4,#0x17]         ;173
0000be  2811              CMP      r0,#0x11              ;173
0000c0  d116              BNE      |L6.240|
0000c2  2021              MOVS     r0,#0x21              ;173
0000c4  5d00              LDRB     r0,[r0,r4]            ;173
0000c6  4947              LDR      r1,|L6.484|
0000c8  78c9              LDRB     r1,[r1,#3]            ;173  ; g_au8IpAddr
0000ca  4048              EORS     r0,r0,r1              ;173
0000cc  2120              MOVS     r1,#0x20              ;173
0000ce  5d09              LDRB     r1,[r1,r4]            ;173
0000d0  4a44              LDR      r2,|L6.484|
0000d2  7892              LDRB     r2,[r2,#2]            ;173  ; g_au8IpAddr
0000d4  4051              EORS     r1,r1,r2              ;173
0000d6  4308              ORRS     r0,r0,r1              ;173
0000d8  7fe1              LDRB     r1,[r4,#0x1f]         ;173
0000da  4a42              LDR      r2,|L6.484|
0000dc  7852              LDRB     r2,[r2,#1]            ;173  ; g_au8IpAddr
0000de  4051              EORS     r1,r1,r2              ;173
0000e0  4308              ORRS     r0,r0,r1              ;173
0000e2  7fa1              LDRB     r1,[r4,#0x1e]         ;173
0000e4  4a3f              LDR      r2,|L6.484|
0000e6  7812              LDRB     r2,[r2,#0]            ;173  ; g_au8IpAddr
0000e8  4051              EORS     r1,r1,r2              ;173
0000ea  4308              ORRS     r0,r0,r1              ;173
0000ec  d100              BNE      |L6.240|
0000ee  e7b7              B        |L6.96|
                  |L6.240|
0000f0  7de0              LDRB     r0,[r4,#0x17]         ;182
0000f2  2801              CMP      r0,#1                 ;182
0000f4  d173              BNE      |L6.478|
0000f6  2021              MOVS     r0,#0x21              ;182
0000f8  5d00              LDRB     r0,[r0,r4]            ;182
0000fa  493a              LDR      r1,|L6.484|
0000fc  78c9              LDRB     r1,[r1,#3]            ;182  ; g_au8IpAddr
0000fe  4048              EORS     r0,r0,r1              ;182
000100  2120              MOVS     r1,#0x20              ;182
000102  5d09              LDRB     r1,[r1,r4]            ;182
000104  4a37              LDR      r2,|L6.484|
000106  7892              LDRB     r2,[r2,#2]            ;182  ; g_au8IpAddr
000108  4051              EORS     r1,r1,r2              ;182
00010a  4308              ORRS     r0,r0,r1              ;182
00010c  7fe1              LDRB     r1,[r4,#0x1f]         ;182
00010e  4a35              LDR      r2,|L6.484|
000110  7852              LDRB     r2,[r2,#1]            ;182  ; g_au8IpAddr
000112  4051              EORS     r1,r1,r2              ;182
000114  4308              ORRS     r0,r0,r1              ;182
000116  7fa1              LDRB     r1,[r4,#0x1e]         ;182
000118  4a32              LDR      r2,|L6.484|
00011a  7812              LDRB     r2,[r2,#0]            ;182  ; g_au8IpAddr
00011c  4051              EORS     r1,r1,r2              ;182
00011e  4308              ORRS     r0,r0,r1              ;182
000120  d15d              BNE      |L6.478|
000122  f8970022          LDRB     r0,[r7,#0x22]         ;183
000126  2808              CMP      r0,#8                 ;183
000128  d159              BNE      |L6.478|
00012a  4642              MOV      r2,r8                 ;188
00012c  4639              MOV      r1,r7                 ;188
00012e  4830              LDR      r0,|L6.496|
000130  f7fffffe          BL       __aeabi_memcpy
000134  4d2e              LDR      r5,|L6.496|
000136  f8d40006          LDR      r0,[r4,#6]            ;192
00013a  6028              STR      r0,[r5,#0]            ;192
00013c  8960              LDRH     r0,[r4,#0xa]          ;192
00013e  80a8              STRH     r0,[r5,#4]            ;192
000140  482c              LDR      r0,|L6.500|
000142  6801              LDR      r1,[r0,#0]            ;193  ; g_au8MacAddr
000144  f8c51006          STR      r1,[r5,#6]            ;193
000148  8880              LDRH     r0,[r0,#4]            ;193  ; g_au8MacAddr
00014a  8168              STRH     r0,[r5,#0xa]          ;193
00014c  2008              MOVS     r0,#8                 ;194
00014e  81a8              STRH     r0,[r5,#0xc]          ;194
000150  2045              MOVS     r0,#0x45              ;195
000152  73a8              STRB     r0,[r5,#0xe]          ;195
000154  2000              MOVS     r0,#0                 ;196
000156  73e8              STRB     r0,[r5,#0xf]          ;196
000158  f44f5070          MOV      r0,#0x3c00            ;197
00015c  8228              STRH     r0,[r5,#0x10]         ;197
00015e  4826              LDR      r0,|L6.504|
000160  8800              LDRH     r0,[r0,#0]            ;198  ; s_u16IpPacketId
000162  f44f417f          MOV      r1,#0xff00            ;198
000166  ea012000          AND      r0,r1,r0,LSL #8       ;198
00016a  4923              LDR      r1,|L6.504|
00016c  8809              LDRH     r1,[r1,#0]            ;198  ; s_u16IpPacketId
00016e  ea402011          ORR      r0,r0,r1,LSR #8       ;198
000172  8268              STRH     r0,[r5,#0x12]         ;198
000174  2000              MOVS     r0,#0                 ;199
000176  82a8              STRH     r0,[r5,#0x14]         ;199
000178  2040              MOVS     r0,#0x40              ;200
00017a  75a8              STRB     r0,[r5,#0x16]         ;200
00017c  2001              MOVS     r0,#1                 ;201
00017e  75e8              STRB     r0,[r5,#0x17]         ;201
000180  2000              MOVS     r0,#0                 ;202
000182  8328              STRH     r0,[r5,#0x18]         ;202
000184  4817              LDR      r0,|L6.484|
000186  6800              LDR      r0,[r0,#0]            ;203  ; g_au8IpAddr
000188  f8c5001a          STR      r0,[r5,#0x1a]         ;203
00018c  f8d4001a          LDR      r0,[r4,#0x1a]         ;204
000190  f8c5001e          STR      r0,[r5,#0x1e]         ;204
000194  210a              MOVS     r1,#0xa               ;205
000196  f105000e          ADD      r0,r5,#0xe            ;205
00019a  f7fffffe          BL       chksum
00019e  43c0              MVNS     r0,r0                 ;205
0001a0  8328              STRH     r0,[r5,#0x18]         ;205
0001a2  4815              LDR      r0,|L6.504|
0001a4  8800              LDRH     r0,[r0,#0]            ;207  ; s_u16IpPacketId
0001a6  1c40              ADDS     r0,r0,#1              ;207
0001a8  4913              LDR      r1,|L6.504|
0001aa  8008              STRH     r0,[r1,#0]            ;207
0001ac  2000              MOVS     r0,#0                 ;210
0001ae  4629              MOV      r1,r5                 ;210
0001b0  f8810022          STRB     r0,[r1,#0x22]         ;210
0001b4  f8810024          STRB     r0,[r1,#0x24]         ;213
0001b8  f8810025          STRB     r0,[r1,#0x25]         ;214
0001bc  f1a80022          SUB      r0,r8,#0x22           ;215
0001c0  0841              LSRS     r1,r0,#1              ;215
0001c2  f1050022          ADD      r0,r5,#0x22           ;215
0001c6  f7fffffe          BL       chksum
0001ca  43c0              MVNS     r0,r0                 ;215
0001cc  4629              MOV      r1,r5                 ;215
0001ce  8488              STRH     r0,[r1,#0x24]         ;215
0001d0  4641              MOV      r1,r8                 ;217
0001d2  4628              MOV      r0,r5                 ;217
0001d4  f7fffffe          BL       EMAC_SendPkt
0001d8  2000              MOVS     r0,#0                 ;219
0001da  e741              B        |L6.96|
0001dc  e7ff              B        |L6.478|
                  |L6.478|
0001de  bf00              NOP                            ;220
0001e0  2000              MOVS     r0,#0                 ;223
0001e2  e73d              B        |L6.96|
;;;225    
                          ENDP

                  |L6.484|
                          DCD      g_au8IpAddr
                  |L6.488|
                          DCD      s_u32PktRdy
                  |L6.492|
                          DCD      au8RxBuf
                  |L6.496|
                          DCD      au8TxBuf
                  |L6.500|
                          DCD      g_au8MacAddr
                  |L6.504|
                          DCD      s_u16IpPacketId

                          AREA ||i.udp_send||, CODE, READONLY, ALIGN=2

                  udp_send PROC
;;;98     
;;;99     static void  udp_send( uint8_t *pu8SrcMac, uint8_t *pu8SrcIP, uint16_t u16SrcPort,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;100                           uint8_t *pu8DestMac, uint8_t *pu8DestIP, uint16_t u16DestPort,
;;;101                           uint8_t *pu8TxData, uint32_t u32Len)
;;;102    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
00000c  e9ddba0e          LDRD     r11,r10,[sp,#0x38]
000010  9d11              LDR      r5,[sp,#0x44]
;;;103        UDP_PACKET *udp = (UDP_PACKET *)&au8TxBuf[0];
000012  4c39              LDR      r4,|L7.248|
;;;104    
;;;105        NVIC_DisableIRQ(EMAC_RX_IRQn);
000014  205d              MOVS     r0,#0x5d
000016  f7fffffe          BL       NVIC_DisableIRQ
;;;106    
;;;107        /*- prepare Ethernet header, 14 bytes -*/
;;;108        memcpy((char *)&au8TxBuf[sizeof(UDP_PACKET)], (char *)pu8TxData, u32Len);
00001a  462a              MOV      r2,r5
00001c  f104002a          ADD      r0,r4,#0x2a
000020  9910              LDR      r1,[sp,#0x40]
000022  f7fffffe          BL       __aeabi_memcpy
;;;109        memcpy((char *)udp->au8DestMac, (char *)pu8DestMac, 6);
000026  f8d90000          LDR      r0,[r9,#0]
00002a  6020              STR      r0,[r4,#0]
00002c  f8b90004          LDRH     r0,[r9,#4]
000030  80a0              STRH     r0,[r4,#4]
;;;110        memcpy((char *)udp->au8SrcMac, (char *)pu8SrcMac, 6);
000032  6838              LDR      r0,[r7,#0]
000034  f8c40006          STR      r0,[r4,#6]
000038  88b8              LDRH     r0,[r7,#4]
00003a  8160              STRH     r0,[r4,#0xa]
;;;111        udp->u16Type = SWAP16(PROTOCOL_IP);
00003c  2008              MOVS     r0,#8
00003e  81a0              STRH     r0,[r4,#0xc]
;;;112    
;;;113        /*- prepare IP header, 20 bytes -*/
;;;114        udp->u8VerHLen = 0x45;     /* fixed value, do not change it */
000040  2045              MOVS     r0,#0x45
000042  73a0              STRB     r0,[r4,#0xe]
;;;115        udp->u8ToS = 0;            /* no special priority */
000044  2000              MOVS     r0,#0
000046  73e0              STRB     r0,[r4,#0xf]
;;;116        udp->u16TLen = SWAP16(sizeof(UDP_PACKET) - 14 + u32Len);
000048  f105001c          ADD      r0,r5,#0x1c
00004c  f3c02007          UBFX     r0,r0,#8,#8
000050  f105011c          ADD      r1,r5,#0x1c
000054  f44f427f          MOV      r2,#0xff00
000058  ea022101          AND      r1,r2,r1,LSL #8
00005c  4308              ORRS     r0,r0,r1
00005e  8220              STRH     r0,[r4,#0x10]
;;;117        udp->u16ID = SWAP16(s_u16IpPacketId);
000060  4826              LDR      r0,|L7.252|
000062  8800              LDRH     r0,[r0,#0]  ; s_u16IpPacketId
000064  4611              MOV      r1,r2
000066  ea012000          AND      r0,r1,r0,LSL #8
00006a  4924              LDR      r1,|L7.252|
00006c  8809              LDRH     r1,[r1,#0]  ; s_u16IpPacketId
00006e  ea402011          ORR      r0,r0,r1,LSR #8
000072  8260              STRH     r0,[r4,#0x12]
;;;118        s_u16IpPacketId++;
000074  4821              LDR      r0,|L7.252|
000076  8800              LDRH     r0,[r0,#0]  ; s_u16IpPacketId
000078  1c40              ADDS     r0,r0,#1
00007a  4920              LDR      r1,|L7.252|
00007c  8008              STRH     r0,[r1,#0]
;;;119        udp->u16Frag = 0;
00007e  2000              MOVS     r0,#0
000080  82a0              STRH     r0,[r4,#0x14]
;;;120        udp->u8TTL = 64;
000082  2040              MOVS     r0,#0x40
000084  75a0              STRB     r0,[r4,#0x16]
;;;121        udp->u8Prot = IP_PRO_UDP;
000086  2011              MOVS     r0,#0x11
000088  75e0              STRB     r0,[r4,#0x17]
;;;122        udp->u16HdrChksum = 0;
00008a  2000              MOVS     r0,#0
00008c  8320              STRH     r0,[r4,#0x18]
;;;123        memcpy((char *)udp->au8SrcIP, (char *)pu8SrcIP, 4);
00008e  f8d80000          LDR      r0,[r8,#0]
000092  f8c4001a          STR      r0,[r4,#0x1a]
;;;124        memcpy((char *)udp->au8DestIP, (char *)pu8DestIP, 4);
000096  f8db0000          LDR      r0,[r11,#0]
00009a  f8c4001e          STR      r0,[r4,#0x1e]
;;;125        udp->u16HdrChksum = ~chksum((uint16_t *)&udp->u8VerHLen, 10);  /* 20 bytes */
00009e  210a              MOVS     r1,#0xa
0000a0  f104000e          ADD      r0,r4,#0xe
0000a4  f7fffffe          BL       chksum
0000a8  43c0              MVNS     r0,r0
0000aa  8320              STRH     r0,[r4,#0x18]
;;;126    
;;;127        /*- prepare UDP header 8 bytes -*/
;;;128        udp->u16SrcPort = SWAP16(u16SrcPort);
0000ac  f44f407f          MOV      r0,#0xff00
0000b0  ea002006          AND      r0,r0,r6,LSL #8
0000b4  ea402016          ORR      r0,r0,r6,LSR #8
0000b8  8460              STRH     r0,[r4,#0x22]
;;;129        udp->u16DestPort = SWAP16(u16DestPort);
0000ba  f44f407f          MOV      r0,#0xff00
0000be  ea00200a          AND      r0,r0,r10,LSL #8
0000c2  ea40201a          ORR      r0,r0,r10,LSR #8
0000c6  84a0              STRH     r0,[r4,#0x24]
;;;130        udp->u16MLen = SWAP16(8 + u32Len);
0000c8  f1050008          ADD      r0,r5,#8
0000cc  f3c02007          UBFX     r0,r0,#8,#8
0000d0  f1050108          ADD      r1,r5,#8
0000d4  f44f427f          MOV      r2,#0xff00
0000d8  ea022101          AND      r1,r2,r1,LSL #8
0000dc  4308              ORRS     r0,r0,r1
0000de  84e0              STRH     r0,[r4,#0x26]
;;;131        udp->u16UDPChksum = 0;
0000e0  2000              MOVS     r0,#0
0000e2  8520              STRH     r0,[r4,#0x28]
;;;132    
;;;133        EMAC_SendPkt(&au8TxBuf[0], sizeof(UDP_PACKET) + u32Len);
0000e4  f105012a          ADD      r1,r5,#0x2a
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       EMAC_SendPkt
;;;134        NVIC_EnableIRQ(EMAC_RX_IRQn);
0000ee  205d              MOVS     r0,#0x5d
0000f0  f7fffffe          BL       NVIC_EnableIRQ
;;;135    }
0000f4  e8bd9fff          POP      {r0-r12,pc}
;;;136    
                          ENDP

                  |L7.248|
                          DCD      au8TxBuf
                  |L7.252|
                          DCD      s_u16IpPacketId

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  au8TxBuf
                          %        1514
                  au8RxBuf
                          %        1514
                  s_au8DhcpRawBuffer
                          %        3020

                          AREA ||.data||, DATA, ALIGN=2

                  u32EscapeFrame
                          DCD      0x00000000
                  s_u16IpPacketId
000004  03e8              DCW      0x03e8
                  s_au8DhcpOptions
000006  6382              DCB      0x63,0x82
000008  53633501          DCB      0x53,0x63,0x35,0x01
00000c  01000000          DCB      0x01,0x00,0x00,0x00
                  s_u32PktRdy
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\net.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_net_c_85beabb9____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_net_c_85beabb9____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_net_c_85beabb9____REVSH|
#line 128
|__asm___5_net_c_85beabb9____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
