; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\system_nuc472_442.o --depend=.\obj\system_nuc472_442.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC472_442\Include -I..\..\..\..\Library\StdDriver\inc -IE:\Keil\ARM\INC -IE:\Keil\ARM\INC\ARM --omf_browse=.\obj\system_nuc472_442.crf ..\..\..\..\Library\Device\Nuvoton\NUC472_442\Source\system_NUC472_442.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;26      *----------------------------------------------------------------------------*/
;;;27     void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29         uint32_t u32Freq, u32ClkSrc;
;;;30         uint32_t u32HclkDiv;
;;;31     
;;;32         u32ClkSrc = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
000002  4910              LDR      r1,|L1.68|
000004  6809              LDR      r1,[r1,#0]
000006  f0010407          AND      r4,r1,#7
;;;33     
;;;34         if(u32ClkSrc != CLK_CLKSEL0_HCLKSEL_PLL) {
00000a  2c02              CMP      r4,#2
00000c  d003              BEQ      |L1.22|
;;;35             /* Use the clock sources directly */
;;;36             u32Freq = gau32ClkSrcTbl[u32ClkSrc];
00000e  490e              LDR      r1,|L1.72|
000010  f8510024          LDR      r0,[r1,r4,LSL #2]
000014  e001              B        |L1.26|
                  |L1.22|
;;;37         } else {
;;;38             /* Use PLL clock */
;;;39             u32Freq = CLK_GetPLLClockFreq();
000016  f7fffffe          BL       CLK_GetPLLClockFreq
                  |L1.26|
;;;40         }
;;;41     
;;;42         u32HclkDiv = (CLK->CLKDIV0 & CLK_CLKDIV0_HCLKDIV_Msk) + 1;
00001a  490c              LDR      r1,|L1.76|
00001c  6809              LDR      r1,[r1,#0]
00001e  f001010f          AND      r1,r1,#0xf
000022  f1010501          ADD      r5,r1,#1
;;;43     
;;;44         /* Update System Core Clock */
;;;45         SystemCoreClock = u32Freq/u32HclkDiv;
000026  fbb0f1f5          UDIV     r1,r0,r5
00002a  4a09              LDR      r2,|L1.80|
00002c  6011              STR      r1,[r2,#0]  ; SystemCoreClock
;;;46     
;;;47         CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
00002e  4611              MOV      r1,r2
000030  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000032  4a08              LDR      r2,|L1.84|
000034  4411              ADD      r1,r1,r2
000036  ea4f0242          LSL      r2,r2,#1
00003a  fbb1f1f2          UDIV     r1,r1,r2
00003e  4a06              LDR      r2,|L1.88|
000040  6011              STR      r1,[r2,#0]  ; CyclesPerUs
;;;48     }
000042  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

                  |L1.68|
                          DCD      0x40000210
                  |L1.72|
                          DCD      gau32ClkSrcTbl
                  |L1.76|
                          DCD      0x40000220
                  |L1.80|
                          DCD      SystemCoreClock
                  |L1.84|
                          DCD      0x0007a120
                  |L1.88|
                          DCD      CyclesPerUs

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;56      */
;;;57     void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         uint32_t u32RTC_EN_Flag = 0;
000002  2400              MOVS     r4,#0
;;;60     
;;;61         /* FPU settings ------------------------------------------------------------*/
;;;62     #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;63         SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
000004  483d              LDR      r0,|L2.252|
000006  6800              LDR      r0,[r0,#0]
000008  f4400070          ORR      r0,r0,#0xf00000
00000c  f04f21e0          MOV      r1,#0xe000e000
000010  f8c10d88          STR      r0,[r1,#0xd88]
;;;64                        (3UL << 11*2)  );               /* set CP11 Full Access */
;;;65     #endif
;;;66     
;;;67         /* ------------------ Release Tamper pin ---------------------------------*/
;;;68         /* Waiting for 10kHz clock ready */
;;;69         CLK_WaitClockReady(CLK_STATUS_LIRCSTB_Msk);
000014  f04f0008          MOV      r0,#8
000018  f7fffffe          BL       CLK_WaitClockReady
;;;70     
;;;71         u32RTC_EN_Flag = ((CLK->APBCLK0 & CLK_APBCLK0_RTCCKEN_Msk) >> CLK_APBCLK0_RTCCKEN_Pos);
00001c  4838              LDR      r0,|L2.256|
00001e  6800              LDR      r0,[r0,#0]
000020  f3c00440          UBFX     r4,r0,#1,#1
;;;72     
;;;73         if(!u32RTC_EN_Flag) {
000024  b93c              CBNZ     r4,|L2.54|
;;;74             CLK->APBCLK0 |= CLK_APBCLK0_RTCCKEN_Msk; // RTC Clock Enable
000026  4836              LDR      r0,|L2.256|
000028  6800              LDR      r0,[r0,#0]
00002a  f0400002          ORR      r0,r0,#2
00002e  f04f4180          MOV      r1,#0x40000000
000032  f8c10208          STR      r0,[r1,#0x208]
                  |L2.54|
;;;75         }
;;;76     
;;;77         RTC->INIT = RTC_INIT_KEY;
000036  4833              LDR      r0,|L2.260|
000038  4933              LDR      r1,|L2.264|
00003a  6008              STR      r0,[r1,#0]
;;;78         while(RTC->INIT != 0x1);
00003c  bf00              NOP      
                  |L2.62|
00003e  4832              LDR      r0,|L2.264|
000040  6800              LDR      r0,[r0,#0]
000042  2801              CMP      r0,#1
000044  d1fb              BNE      |L2.62|
;;;79     
;;;80         if(!(RTC->TAMPCTL & RTC_TAMPCTL_TIEN_Msk)) {
000046  4831              LDR      r0,|L2.268|
000048  6800              LDR      r0,[r0,#0]
00004a  f0100f01          TST      r0,#1
00004e  d14b              BNE      |L2.232|
;;;81             RTC->RWEN = RTC_WRITE_KEY;
000050  f64a1065          MOV      r0,#0xa965
000054  492c              LDR      r1,|L2.264|
000056  6048              STR      r0,[r1,#4]
;;;82             while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000058  bf00              NOP      
                  |L2.90|
00005a  482b              LDR      r0,|L2.264|
00005c  6840              LDR      r0,[r0,#4]
00005e  f4103f80          TST      r0,#0x10000
000062  d0fa              BEQ      |L2.90|
;;;83     
;;;84             RTC->SPRCTL |= RTC_SPRCTL_SPRRWEN_Msk;
000064  4828              LDR      r0,|L2.264|
000066  6bc0              LDR      r0,[r0,#0x3c]
000068  f0400004          ORR      r0,r0,#4
00006c  4926              LDR      r1,|L2.264|
00006e  63c8              STR      r0,[r1,#0x3c]
;;;85     
;;;86             while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRWRDY_Msk));
000070  bf00              NOP      
                  |L2.114|
000072  4825              LDR      r0,|L2.264|
000074  6bc0              LDR      r0,[r0,#0x3c]
000076  f0100f80          TST      r0,#0x80
00007a  d0fa              BEQ      |L2.114|
;;;87     
;;;88             RTC->RWEN = RTC_WRITE_KEY;
00007c  f64a1065          MOV      r0,#0xa965
000080  4921              LDR      r1,|L2.264|
000082  6048              STR      r0,[r1,#4]
;;;89             while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000084  bf00              NOP      
                  |L2.134|
000086  4820              LDR      r0,|L2.264|
000088  6840              LDR      r0,[r0,#4]
00008a  f4103f80          TST      r0,#0x10000
00008e  d0fa              BEQ      |L2.134|
;;;90     
;;;91             RTC->SPR[23] = RTC->SPR[23];
000090  481f              LDR      r0,|L2.272|
000092  6dc1              LDR      r1,[r0,#0x5c]
000094  65c1              STR      r1,[r0,#0x5c]
;;;92             while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRWRDY_Msk));
000096  bf00              NOP      
                  |L2.152|
000098  481b              LDR      r0,|L2.264|
00009a  6bc0              LDR      r0,[r0,#0x3c]
00009c  f0100f80          TST      r0,#0x80
0000a0  d0fa              BEQ      |L2.152|
;;;93     
;;;94             RTC->RWEN = RTC_WRITE_KEY;
0000a2  f64a1065          MOV      r0,#0xa965
0000a6  4918              LDR      r1,|L2.264|
0000a8  6048              STR      r0,[r1,#4]
;;;95             while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000aa  bf00              NOP      
                  |L2.172|
0000ac  4816              LDR      r0,|L2.264|
0000ae  6840              LDR      r0,[r0,#4]
0000b0  f4103f80          TST      r0,#0x10000
0000b4  d0fa              BEQ      |L2.172|
;;;96     
;;;97             RTC->SPRCTL &= ~RTC_SPRCTL_SPRRWEN_Msk;
0000b6  4814              LDR      r0,|L2.264|
0000b8  6bc0              LDR      r0,[r0,#0x3c]
0000ba  f0200004          BIC      r0,r0,#4
0000be  4912              LDR      r1,|L2.264|
0000c0  63c8              STR      r0,[r1,#0x3c]
;;;98             while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRWRDY_Msk));
0000c2  bf00              NOP      
                  |L2.196|
0000c4  4810              LDR      r0,|L2.264|
0000c6  6bc0              LDR      r0,[r0,#0x3c]
0000c8  f0100f80          TST      r0,#0x80
0000cc  d0fa              BEQ      |L2.196|
;;;99     
;;;100            RTC->RWEN = RTC_WRITE_KEY;
0000ce  f64a1065          MOV      r0,#0xa965
0000d2  490d              LDR      r1,|L2.264|
0000d4  6048              STR      r0,[r1,#4]
;;;101            while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000d6  bf00              NOP      
                  |L2.216|
0000d8  480b              LDR      r0,|L2.264|
0000da  6840              LDR      r0,[r0,#4]
0000dc  f4103f80          TST      r0,#0x10000
0000e0  d0fa              BEQ      |L2.216|
;;;102    
;;;103            RTC->INTSTS = RTC_INTSTS_TICKIF_Msk;
0000e2  2002              MOVS     r0,#2
0000e4  4908              LDR      r1,|L2.264|
0000e6  62c8              STR      r0,[r1,#0x2c]
                  |L2.232|
;;;104        }
;;;105    
;;;106        if(!u32RTC_EN_Flag) {
0000e8  b93c              CBNZ     r4,|L2.250|
;;;107            CLK->APBCLK0 &= ~CLK_APBCLK0_RTCCKEN_Msk; // RTC Clock Disable
0000ea  4805              LDR      r0,|L2.256|
0000ec  6800              LDR      r0,[r0,#0]
0000ee  f0200002          BIC      r0,r0,#2
0000f2  f04f4180          MOV      r1,#0x40000000
0000f6  f8c10208          STR      r0,[r1,#0x208]
                  |L2.250|
;;;108        }
;;;109        /*------------------------------------------------------------------------*/
;;;110    
;;;111    }
0000fa  bd10              POP      {r4,pc}
;;;112    /*** (C) COPYRIGHT 2013 Nuvoton Technology Corp. ***/
                          ENDP

                  |L2.252|
                          DCD      0xe000ed88
                  |L2.256|
                          DCD      0x40000208
                  |L2.260|
                          DCD      0xa5eb1357
                  |L2.264|
                          DCD      0x40041000
                  |L2.268|
                          DCD      0x40041110
                  |L2.272|
                          DCD      0x40041040

                          AREA ||.data||, DATA, ALIGN=2

                  u32EscapeFrame
                          DCD      0x00000000
                  SystemCoreClock
                          DCD      0x01518000
                  CyclesPerUs
                          DCD      0x00000016
                  gau32ClkSrcTbl
                          DCD      0x00b71b00
                          DCD      0x00008000
                          DCD      0x00000000
                          DCD      0x00002710
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\NUC472_442\\Source\\system_NUC472_442.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_system_NUC472_442_c_5d646a67____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_system_NUC472_442_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_system_NUC472_442_c_5d646a67____REVSH|
#line 128
|__asm___19_system_NUC472_442_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
