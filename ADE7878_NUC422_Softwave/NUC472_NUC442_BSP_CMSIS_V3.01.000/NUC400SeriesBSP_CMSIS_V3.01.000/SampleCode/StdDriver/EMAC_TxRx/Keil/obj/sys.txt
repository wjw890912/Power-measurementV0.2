; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\sys.o --depend=.\obj\sys.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC472_442\Include -I..\..\..\..\Library\StdDriver\inc -IE:\Keil\ARM\INC -IE:\Keil\ARM\INC\ARM --omf_browse=.\obj\sys.crf ..\..\..\..\Library\StdDriver\src\sys.c]
                          THUMB

                          AREA ||i.SYS_ClearResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_ClearResetSrc PROC
;;;30       */
;;;31     void SYS_ClearResetSrc(uint32_t u32Src)
000000  f04f4180          MOV      r1,#0x40000000
;;;32     {
;;;33         SYS->RSTSTS |= u32Src;
000004  6849              LDR      r1,[r1,#4]
000006  4301              ORRS     r1,r1,r0
000008  f04f4280          MOV      r2,#0x40000000
00000c  6051              STR      r1,[r2,#4]
;;;34     }
00000e  4770              BX       lr
;;;35     
                          ENDP


                          AREA ||i.SYS_DisableBOD||, CODE, READONLY, ALIGN=1

                  SYS_DisableBOD PROC
;;;202      */
;;;203    void SYS_DisableBOD(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;204    {
;;;205        SYS->BODCTL  &= ~SYS_BODCTL_BODEN_Msk;
000004  6980              LDR      r0,[r0,#0x18]
000006  f0200001          BIC      r0,r0,#1
00000a  f04f4180          MOV      r1,#0x40000000
00000e  6188              STR      r0,[r1,#0x18]
;;;206    }
000010  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.SYS_EnableBOD||, CODE, READONLY, ALIGN=1

                  SYS_EnableBOD PROC
;;;192      */
;;;193    void SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel)
000000  f04f4280          MOV      r2,#0x40000000
;;;194    {
;;;195        SYS->BODCTL &= ~(SYS_BODCTL_BODVL_Msk|SYS_BODCTL_BODRSTEN_Msk);
000004  6992              LDR      r2,[r2,#0x18]
000006  f022020e          BIC      r2,r2,#0xe
00000a  f04f4380          MOV      r3,#0x40000000
00000e  619a              STR      r2,[r3,#0x18]
;;;196        SYS->BODCTL |=(i32Mode|u32BODLevel|SYS_BODCTL_BODEN_Msk);
000010  461a              MOV      r2,r3
000012  6992              LDR      r2,[r2,#0x18]
000014  ea400301          ORR      r3,r0,r1
000018  f0430301          ORR      r3,r3,#1
00001c  431a              ORRS     r2,r2,r3
00001e  f04f4380          MOV      r3,#0x40000000
000022  619a              STR      r2,[r3,#0x18]
;;;197    }
000024  4770              BX       lr
;;;198    
                          ENDP


                          AREA ||i.SYS_GetBODStatus||, CODE, READONLY, ALIGN=1

                  SYS_GetBODStatus PROC
;;;41       */
;;;42     uint32_t SYS_GetBODStatus()
000000  f04f4080          MOV      r0,#0x40000000
;;;43     {
;;;44         return (SYS->BODCTL & SYS_BODCTL_BODOUT_Msk);
000004  6980              LDR      r0,[r0,#0x18]
000006  f0000040          AND      r0,r0,#0x40
;;;45     }
00000a  4770              BX       lr
;;;46     
                          ENDP


                          AREA ||i.SYS_GetResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_GetResetSrc PROC
;;;50       */
;;;51     uint32_t SYS_GetResetSrc(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;52     {
;;;53         return (SYS->RSTSTS);
000004  6840              LDR      r0,[r0,#4]
;;;54     }
000006  4770              BX       lr
;;;55     
                          ENDP


                          AREA ||i.SYS_IsRegLocked||, CODE, READONLY, ALIGN=2

                  SYS_IsRegLocked PROC
;;;60       */
;;;61     uint32_t SYS_IsRegLocked(void)
000000  4802              LDR      r0,|L6.12|
;;;62     {
;;;63         return (SYS->REGLCTL & SYS_REGLCTL_REGLCTL_Msk);
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
;;;64     }
000008  4770              BX       lr
;;;65     
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40000100

                          AREA ||i.SYS_LockReg||, CODE, READONLY, ALIGN=2

                  SYS_LockReg PROC
;;;70       */
;;;71     void SYS_LockReg(void)
000000  2000              MOVS     r0,#0
;;;72     {
;;;73         SYS->REGLCTL = 0;
000002  4901              LDR      r1,|L7.8|
000004  6008              STR      r0,[r1,#0]
;;;74     }
000006  4770              BX       lr
;;;75     
                          ENDP

                  |L7.8|
                          DCD      0x40000100

                          AREA ||i.SYS_ReadPDID||, CODE, READONLY, ALIGN=1

                  SYS_ReadPDID PROC
;;;94       */
;;;95     uint32_t  SYS_ReadPDID(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;96     {
;;;97         return SYS->PDID;
000004  6800              LDR      r0,[r0,#0]
;;;98     }
000006  4770              BX       lr
;;;99     
                          ENDP


                          AREA ||i.SYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  SYS_ResetCPU PROC
;;;112      */
;;;113    void SYS_ResetCPU(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;114    {
;;;115        SYS->IPRST0 |= SYS_IPRST0_CPURST_Msk;
000004  6880              LDR      r0,[r0,#8]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f4180          MOV      r1,#0x40000000
00000e  6088              STR      r0,[r1,#8]
;;;116    }
000010  4770              BX       lr
;;;117    
                          ENDP


                          AREA ||i.SYS_ResetChip||, CODE, READONLY, ALIGN=1

                  SYS_ResetChip PROC
;;;103      */
;;;104    void SYS_ResetChip(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;105    {
;;;106        SYS->IPRST0 |= SYS_IPRST0_CHIPRST_Msk;
000004  6880              LDR      r0,[r0,#8]
000006  f0400001          ORR      r0,r0,#1
00000a  f04f4180          MOV      r1,#0x40000000
00000e  6088              STR      r0,[r1,#8]
;;;107    }
000010  4770              BX       lr
;;;108    
                          ENDP


                          AREA ||i.SYS_ResetModule||, CODE, READONLY, ALIGN=2

                  SYS_ResetModule PROC
;;;171      */
;;;172    void SYS_ResetModule(uint32_t u32ModuleIndex)
000000  490b              LDR      r1,|L11.48|
;;;173    {
;;;174        *(volatile uint32_t *)((uint32_t)&(SYS->IPRST0) + (u32ModuleIndex>>24)) |= 1<<(u32ModuleIndex & 0x00ffffff);
000002  eb016110          ADD      r1,r1,r0,LSR #24
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  4082              LSLS     r2,r2,r0
00000c  4311              ORRS     r1,r1,r2
00000e  4a08              LDR      r2,|L11.48|
000010  eb026210          ADD      r2,r2,r0,LSR #24
000014  6011              STR      r1,[r2,#0]
;;;175        *(volatile uint32_t *)((uint32_t)&(SYS->IPRST0) + (u32ModuleIndex>>24)) &= ~(1<<(u32ModuleIndex & 0x00ffffff));
000016  4906              LDR      r1,|L11.48|
000018  eb016110          ADD      r1,r1,r0,LSR #24
00001c  680a              LDR      r2,[r1,#0]
00001e  2101              MOVS     r1,#1
000020  4081              LSLS     r1,r1,r0
000022  ea220101          BIC      r1,r2,r1
000026  4a02              LDR      r2,|L11.48|
000028  eb026210          ADD      r2,r2,r0,LSR #24
00002c  6011              STR      r1,[r2,#0]
;;;176    }
00002e  4770              BX       lr
;;;177    
                          ENDP

                  |L11.48|
                          DCD      0x40000008

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;81       */
;;;82     void SYS_UnlockReg(void)
000000  e00c              B        |L12.28|
                  |L12.2|
;;;83     {
;;;84         while(SYS->REGLCTL != SYS_REGLCTL_REGLCTL_Msk) {
;;;85             SYS->REGLCTL = 0x59;
000002  2059              MOVS     r0,#0x59
000004  4908              LDR      r1,|L12.40|
000006  6008              STR      r0,[r1,#0]
;;;86             SYS->REGLCTL = 0x16;
000008  f04f0016          MOV      r0,#0x16
00000c  f04f4180          MOV      r1,#0x40000000
000010  f8c10100          STR      r0,[r1,#0x100]
;;;87             SYS->REGLCTL = 0x88;
000014  f04f0088          MOV      r0,#0x88
000018  4903              LDR      r1,|L12.40|
00001a  6008              STR      r0,[r1,#0]
                  |L12.28|
00001c  4802              LDR      r0,|L12.40|
00001e  6800              LDR      r0,[r0,#0]            ;84
000020  2801              CMP      r0,#1                 ;84
000022  d1ee              BNE      |L12.2|
;;;88         }
;;;89     }
000024  4770              BX       lr
;;;90     
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      0x40000100

                          AREA ||.data||, DATA, ALIGN=2

                  u32EscapeFrame
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\sys.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_sys_c_962b9fbe____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REVSH|
#line 128
|__asm___5_sys_c_962b9fbe____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
