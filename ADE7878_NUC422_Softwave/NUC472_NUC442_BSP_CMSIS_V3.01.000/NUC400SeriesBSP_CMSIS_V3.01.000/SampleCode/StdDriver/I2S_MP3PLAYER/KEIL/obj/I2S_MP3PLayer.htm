<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\I2S_MP3PLayer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\I2S_MP3PLayer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Fri Sep 11 11:47:21 2015
<BR><P>
<H3>Maximum Stack Usage =       2920 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7c]">Reset_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[11]">BOD_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[12]">IRC_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[13]">PWRWU_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[14]">SRAMF_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[15]">CLKF_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc472_442.o(.text) referenced 46 times from startup_nuc472_442.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[18]">TAMPER_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[19]">EINT0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1a]">EINT1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1b]">EINT2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1c]">EINT3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1d]">EINT4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1e]">EINT5_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[1f]">EINT6_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[20]">EINT7_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[21]">GPA_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[22]">GPB_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[23]">GPC_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[24]">GPD_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[25]">GPE_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[26]">GPF_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[27]">GPG_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[28]">GPH_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[29]">GPI_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2e]">PDMA_IRQHandler</a> from nuc472_442_isr.o(i.PDMA_IRQHandler) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[2f]">ADC_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[30]">WDT_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[31]">WWDT_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[32]">EADC0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[33]">EADC1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[34]">EADC2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[35]">EADC3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[36]">ACMP_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[37]">OPA0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[38]">OPA1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[39]">ICAP0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3a]">ICAP1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3b]">PWM0CH0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3c]">PWM0CH1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3d]">PWM0CH2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3e]">PWM0CH3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[3f]">PWM0CH4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[40]">PWM0CH5_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[41]">PWM0_BRK_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[42]">QEI0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[43]">PWM1CH0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[44]">PWM1CH1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[45]">PWM1CH2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[46]">PWM1CH3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[47]">PWM1CH4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[48]">PWM1CH5_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[49]">PWM1_BRK_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4a]">QEI1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4b]">EPWM0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4c]">EPWM0BRK_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4d]">EPWM1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4e]">EPWM1BRK_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[4f]">USBD_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[50]">USBH_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[51]">USB_OTG_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[52]">EMAC_TX_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[53]">EMAC_RX_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[54]">SPI0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[55]">SPI1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[56]">SPI2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[57]">SPI3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[58]">UART0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[59]">UART1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5a]">UART2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5b]">UART3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5c]">UART4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5d]">UART5_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5e]">I2C0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[5f]">I2C1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[60]">I2C2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[61]">I2C3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[62]">I2C4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[63]">SC0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[64]">SC1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[65]">SC2_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[66]">SC3_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[67]">SC4_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[68]">SC5_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[69]">CAN0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6a]">CAN1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6b]">I2S0_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6c]">I2S1_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6d]">SD_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6e]">PS2D_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[6f]">CAP_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[70]">CRYPTO_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[71]">CRC_IRQHandler</a> from startup_nuc472_442.o(.text) referenced from startup_nuc472_442.o(RESET)
 <LI><a href="#[72]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[73]">SystemInit</a> from system_nuc472_442.o(i.SystemInit) referenced from startup_nuc472_442.o(.text)
 <LI><a href="#[7d]">__main</a> from __main.o(!!!main) referenced from startup_nuc472_442.o(.text)
 <LI><a href="#[75]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[76]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[77]">synth_full</a> from synth.o(i.synth_full) referenced from synth.o(i.mad_synth_frame)
 <LI><a href="#[78]">synth_half</a> from synth.o(i.synth_half) referenced from synth.o(i.mad_synth_frame)
 <LI><a href="#[79]">mad_layer_I</a> from layer12.o(i.mad_layer_I) referenced from frame.o(.constdata)
 <LI><a href="#[7a]">mad_layer_II</a> from layer12.o(i.mad_layer_II) referenced from frame.o(.constdata)
 <LI><a href="#[7b]">mad_layer_III</a> from layer3.o(i.mad_layer_III) referenced from frame.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[141]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[142]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[85]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[143]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[87]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[144]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[145]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[146]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[147]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[148]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[149]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[150]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[151]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[152]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[153]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[154]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[155]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[156]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[15b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[15c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[15d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MP3Player &rArr; MP3_ParseHeaderInfo &rArr; mp3CountV1L3Headers &rArr; mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[91]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[160]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[93]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))

<P><STRONG><a name="[161]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CLKF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EPWM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EPWM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ICAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ICAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>OPA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>PS2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM0CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWM0CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PWM0CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM0CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PWM0CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PWM0CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PWM0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PWM1CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PWM1CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PWM1CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PWM1CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PWM1CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PWM1CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PWM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SRAMF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USB_OTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[95]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[96]"></a>malloc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[9a]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[9b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopPlay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPlay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_Setup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_ConfigSampleRate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[86]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[162]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[a1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[163]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[a3]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[164]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3PrintHeader
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3GetFrameLength
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[16a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__rt_heap_descriptor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8a]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[a9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_printf_int_common</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9c]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[a5]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[16f]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[ad]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[170]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[171]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[172]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[a8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[173]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[90]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b0]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[af]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[94]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[b3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f5]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Inits
</UL>

<P><STRONG><a name="[105]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[b5]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
</UL>

<P><STRONG><a name="[101]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_GetHXTFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
</UL>

<P><STRONG><a name="[be]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>

<P><STRONG><a name="[b7]"></a>CLK_SetHCLK</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[f6]"></a>CLK_SetModuleClock</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Inits
</UL>

<P><STRONG><a name="[106]"></a>CLK_WaitClockReady</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10b]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nau8822.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_Setup
</UL>

<P><STRONG><a name="[136]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[b9]"></a>I2C3_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>I2C_Open</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c.o(i.I2C_Open))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>

<P><STRONG><a name="[bb]"></a>I2C_SetSlaveAddr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2c.o(i.I2C_SetSlaveAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>

<P><STRONG><a name="[10a]"></a>I2C_WriteWAU8822</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, nau8822.o(i.I2C_WriteWAU8822))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_Setup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_ConfigSampleRate
</UL>

<P><STRONG><a name="[bc]"></a>I2S_EnableMCLK</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2s.o(i.I2S_EnableMCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_EnableMCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[bf]"></a>I2S_Open</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, i2s.o(i.I2S_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetSourceClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[d5]"></a>MP3Player</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, mp3.o(i.MP3Player))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = MP3Player &rArr; MP3_ParseHeaderInfo &rArr; mp3CountV1L3Headers &rArr; mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_frame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Open
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableMCLK
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopPlay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPlay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_Setup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAU8822_ConfigSampleRate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MP3_DECODE_HEADER</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, mp3headerparser.o(i.MP3_DECODE_HEADER))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3CountV1L3Headers
</UL>

<P><STRONG><a name="[138]"></a>MP3_IS_VALID_HEADER</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mp3headerparser.o(i.MP3_IS_VALID_HEADER))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3CountV1L3Headers
</UL>

<P><STRONG><a name="[d7]"></a>MP3_ParseHeaderInfo</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, mp3.o(i.MP3_ParseHeaderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = MP3_ParseHeaderInfo &rArr; mp3CountV1L3Headers &rArr; mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3CountV1L3Headers
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[108]"></a>PDMA_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pdma.o(i.PDMA_Close))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopPlay
</UL>

<P><STRONG><a name="[ed]"></a>PDMA_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pdma.o(i.PDMA_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Init
</UL>

<P><STRONG><a name="[2e]"></a>PDMA_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nuc472_442_isr.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PDMA_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Reset_SCTable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>PDMA_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.PDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PDMA_Init &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPlay
</UL>

<P><STRONG><a name="[eb]"></a>PDMA_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pdma.o(i.PDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Init
</UL>

<P><STRONG><a name="[e9]"></a>PDMA_Reset_SCTable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.PDMA_Reset_SCTable))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 268 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Init
</UL>

<P><STRONG><a name="[fa]"></a>SD_CardDetection</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, sd.o(i.SD_CardDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[fd]"></a>SD_CheckRB</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sd.o(i.SD_CheckRB))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
</UL>

<P><STRONG><a name="[ee]"></a>SD_Get_SD_info</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, sd.o(i.SD_Get_SD_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_Get_SD_info &rArr; SD_SDCmdAndRsp2
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[f0]"></a>SD_Init</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_Init &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[f4]"></a>SD_Inits</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.SD_Inits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_Inits &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[f8]"></a>SD_Open</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, sd.o(i.SD_Open))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open_
</UL>

<P><STRONG><a name="[f7]"></a>SD_Open_</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdglue.o(i.SD_Open_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_Open_ &rArr; SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f9]"></a>SD_Probe</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sd.o(i.SD_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open_
</UL>

<P><STRONG><a name="[fc]"></a>SD_Read</STRONG> (Thumb, 336 bytes, Stack size 36 bytes, sd.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_Read &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[f3]"></a>SD_SDCmdAndRsp</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, sd.o(i.SD_SDCmdAndRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_SDCmdAndRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ef]"></a>SD_SDCmdAndRsp2</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, sd.o(i.SD_SDCmdAndRsp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_SDCmdAndRsp2
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Get_SD_info
</UL>

<P><STRONG><a name="[ff]"></a>SD_SDCmdAndRspDataIn</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sd.o(i.SD_SDCmdAndRspDataIn))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchToHighSpeed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
</UL>

<P><STRONG><a name="[f2]"></a>SD_SDCommand</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sd.o(i.SD_SDCommand))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fb]"></a>SD_SelectCardType</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, sd.o(i.SD_SelectCardType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_SelectCardType &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchToHighSpeed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Set_clock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRspDataIn
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
</UL>

<P><STRONG><a name="[f1]"></a>SD_Set_clock</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sd.o(i.SD_Set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Probe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fe]"></a>SD_Swap32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sd.o(i.SD_Swap32))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp2
</UL>

<P><STRONG><a name="[100]"></a>SD_SwitchToHighSpeed</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, sd.o(i.SD_SwitchToHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_SwitchToHighSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCardType
</UL>

<P><STRONG><a name="[102]"></a>SD_Write</STRONG> (Thumb, 320 bytes, Stack size 36 bytes, sd.o(i.SD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SDCmdAndRsp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckRB
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[103]"></a>SYS_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYS_Init &rArr; SD_Inits &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Inits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[104]"></a>SYS_UnlockReg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[10c]"></a>SendChar_ToUART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[e7]"></a>StartPlay</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mp3.o(i.StartPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = StartPlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[e5]"></a>StopPlay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mp3.o(i.StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = StopPlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[b6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_nuc472_442.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, system_nuc472_442.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>UART_Open</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>WAU8822_ConfigSampleRate</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, nau8822.o(i.WAU8822_ConfigSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WAU8822_ConfigSampleRate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteWAU8822
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[dc]"></a>WAU8822_Setup</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, nau8822.o(i.WAU8822_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WAU8822_Setup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteWAU8822
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[b4]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._ttywrch))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[11d]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[111]"></a>disk_initialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_initialize &rArr; SD_Open_ &rArr; SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Open_
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[13d]"></a>disk_ioctl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[10e]"></a>disk_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = disk_read &rArr; SD_Read &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[110]"></a>disk_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[122]"></a>disk_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[e4]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[135]"></a>f_mount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>f_open</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[df]"></a>f_read</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[123]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[ab]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[76]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[125]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[11a]"></a>mad_bit_crc</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, bit.o(i.mad_bit_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[12f]"></a>mad_bit_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(i.mad_bit_init))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[d1]"></a>mad_bit_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bit.o(i.mad_bit_length))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[12c]"></a>mad_bit_nextbyte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(i.mad_bit_nextbyte))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[ce]"></a>mad_bit_read</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bit.o(i.mad_bit_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>

<P><STRONG><a name="[cd]"></a>mad_bit_skip</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bit.o(i.mad_bit_skip))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[e1]"></a>mad_frame_decode</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, frame.o(i.mad_frame_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[e2]"></a>mad_frame_finish</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frame.o(i.mad_frame_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_frame_finish &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[d9]"></a>mad_frame_init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, frame.o(i.mad_frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mad_frame_init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[175]"></a>mad_frame_mute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, frame.o(i.mad_frame_mute), UNUSED)

<P><STRONG><a name="[12e]"></a>mad_header_decode</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, frame.o(i.mad_header_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[130]"></a>mad_header_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, frame.o(i.mad_header_init))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[79]"></a>mad_layer_I</STRONG> (Thumb, 446 bytes, Stack size 168 bytes, layer12.o(i.mad_layer_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mad_layer_I &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>mad_layer_II</STRONG> (Thumb, 1030 bytes, Stack size 392 bytes, layer12.o(i.mad_layer_II))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mad_layer_II &rArr; II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>mad_layer_III</STRONG> (Thumb, 582 bytes, Stack size 312 bytes, layer3.o(i.mad_layer_III))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>mad_stream_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stream.o(i.mad_stream_buffer))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[e3]"></a>mad_stream_finish</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stream.o(i.mad_stream_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_stream_finish &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[d8]"></a>mad_stream_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stream.o(i.mad_stream_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[12d]"></a>mad_stream_sync</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stream.o(i.mad_stream_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[e6]"></a>mad_synth_frame</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, synth.o(i.mad_synth_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_synth_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[da]"></a>mad_synth_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, synth.o(i.mad_synth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_synth_init &rArr; mad_synth_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
</UL>

<P><STRONG><a name="[132]"></a>mad_synth_mute</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, synth.o(i.mad_synth_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
</UL>

<P><STRONG><a name="[131]"></a>mad_timer_set</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, timer.o(i.mad_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mad_timer_set &rArr; scale_rational &rArr; reduce_rational
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[8f]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = main &rArr; MP3Player &rArr; MP3_ParseHeaderInfo &rArr; mp3CountV1L3Headers &rArr; mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3Player
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e8]"></a>mp3CountV1L3Headers</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mp3headerparser.o(i.mp3CountV1L3Headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mp3CountV1L3Headers &rArr; mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_IS_VALID_HEADER
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_DECODE_HEADER
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3PrintHeader
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3GetFrameLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_ParseHeaderInfo
</UL>

<P><STRONG><a name="[114]"></a>put_fat</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[88]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[176]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[177]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc472_442.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc472_442.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>mp3GetFrameLength</STRONG> (Thumb, 156 bytes, Stack size 336 bytes, mp3headerparser.o(i.mp3GetFrameLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mp3GetFrameLength &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3CountV1L3Headers
</UL>

<P><STRONG><a name="[13a]"></a>mp3PrintHeader</STRONG> (Thumb, 164 bytes, Stack size 328 bytes, mp3headerparser.o(i.mp3PrintHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mp3PrintHeader &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3CountV1L3Headers
</UL>

<P><STRONG><a name="[bd]"></a>I2S_GetSourceClockFreq</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, i2s.o(i.I2S_GetSourceClockFreq))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Open
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableMCLK
</UL>

<P><STRONG><a name="[c0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2s.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Open
</UL>

<P><STRONG><a name="[b8]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[10d]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = check_fs &rArr; disk_read &rArr; SD_Read &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[10f]"></a>chk_mounted</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = chk_mounted &rArr; disk_initialize &rArr; SD_Open_ &rArr; SD_Probe &rArr; SD_Init &rArr; SD_Set_clock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[112]"></a>create_chain</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[115]"></a>create_name</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[11b]"></a>dir_next</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[11e]"></a>dir_register</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[11f]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[124]"></a>follow_path</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[126]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[121]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[116]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[120]"></a>move_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[128]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[127]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[12a]"></a>sync_fs</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[11c]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_SDCmdAndRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[129]"></a>validate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[119]"></a>decode_header</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, frame.o(i.decode_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[12b]"></a>free_bitrate</STRONG> (Thumb, 236 bytes, Stack size 144 bytes, frame.o(i.free_bitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[c7]"></a>III_aliasreduce</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, layer3.o(i.III_aliasreduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c1]"></a>III_decode</STRONG> (Thumb, 824 bytes, Stack size 232 bytes, layer3.o(i.III_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_overlap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_freqinver
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[cc]"></a>III_exponents</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, layer3.o(i.III_exponents))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = III_exponents
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[cb]"></a>III_freqinver</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, layer3.o(i.III_freqinver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_freqinver
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c4]"></a>III_huffdecode</STRONG> (Thumb, 1112 bytes, Stack size 320 bytes, layer3.o(i.III_huffdecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = III_huffdecode &rArr; III_exponents
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_requantize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_exponents
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c8]"></a>III_imdct_l</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, layer3.o(i.III_imdct_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[ca]"></a>III_imdct_s</STRONG> (Thumb, 346 bytes, Stack size 164 bytes, layer3.o(i.III_imdct_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = III_imdct_s
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c9]"></a>III_overlap</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, layer3.o(i.III_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = III_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c6]"></a>III_reorder</STRONG> (Thumb, 196 bytes, Stack size 2368 bytes, layer3.o(i.III_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[cf]"></a>III_requantize</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, layer3.o(i.III_requantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = III_requantize
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[c3]"></a>III_scalefactors</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, layer3.o(i.III_scalefactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = III_scalefactors &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[c2]"></a>III_scalefactors_lsf</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, layer3.o(i.III_scalefactors_lsf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = III_scalefactors_lsf &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[d2]"></a>III_sideinfo</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, layer3.o(i.III_sideinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = III_sideinfo &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[c5]"></a>III_stereo</STRONG> (Thumb, 770 bytes, Stack size 156 bytes, layer3.o(i.III_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = III_stereo
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[117]"></a>dctIV</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, layer3.o(i.dctIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>

<P><STRONG><a name="[13c]"></a>fastsdct</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, layer3.o(i.fastsdct))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>

<P><STRONG><a name="[d0]"></a>imdct36</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, layer3.o(i.imdct36))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
</UL>

<P><STRONG><a name="[118]"></a>sdctII</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, layer3.o(i.sdctII))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>

<P><STRONG><a name="[d3]"></a>II_samples</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, layer12.o(i.II_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[d4]"></a>I_sample</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, layer12.o(i.I_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_sample &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
</UL>

<P><STRONG><a name="[13e]"></a>dct32</STRONG> (Thumb, 2418 bytes, Stack size 240 bytes, synth.o(i.dct32))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dct32
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_half
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_full
</UL>

<P><STRONG><a name="[13f]"></a>scale</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, synth.o(i.scale))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_full
</UL>

<P><STRONG><a name="[77]"></a>synth_full</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, synth.o(i.synth_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = synth_full &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(i.mad_synth_frame)
</UL>
<P><STRONG><a name="[78]"></a>synth_half</STRONG> (Thumb, 700 bytes, Stack size 64 bytes, synth.o(i.synth_half))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = synth_half &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(i.mad_synth_frame)
</UL>
<P><STRONG><a name="[13b]"></a>reduce_rational</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, timer.o(i.reduce_rational))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reduce_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[134]"></a>reduce_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.reduce_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[133]"></a>scale_rational</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.scale_rational))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = scale_rational &rArr; reduce_rational
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[75]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
